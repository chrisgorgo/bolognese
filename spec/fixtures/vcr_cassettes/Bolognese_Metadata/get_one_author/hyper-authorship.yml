---
http_interactions:
- request:
    method: get
    uri: https://api.datacite.org/prefixes/10.17182
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Maremma - https://github.com/datacite/maremma
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Access-Control-Allow-Headers:
      - Content-Type,Accept,Accept-Encoding,Origin,User-Agent,Cache-Control,Keep-Alive
      Access-Control-Allow-Methods:
      - GET, POST, OPTIONS
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Max-Age:
      - '1728000'
      Cache-Control:
      - max-age=0, private, must-revalidate
      Content-Type:
      - application/vnd.api+json; charset=utf-8
      Date:
      - Wed, 03 May 2017 06:53:38 GMT
      Etag:
      - W/"9a3fb62ff62d35e29b93e5b2e9628d91"
      Server:
      - openresty/1.11.2.2
      Status:
      - 200 OK
      Vary:
      - Accept-Encoding
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - SAMEORIGIN
      X-Powered-By:
      - Phusion Passenger 5.1.2
      X-Request-Id:
      - add59aab-921a-41e0-ac46-ffeb88844965
      X-Runtime:
      - '0.209420'
      X-Xss-Protection:
      - 1; mode=block
      Content-Length:
      - '125'
      Connection:
      - keep-alive
    body:
      encoding: UTF-8
      string: '{"data":{"id":"10.17182","type":"prefixes","attributes":{"registration-agency":"DataCite","updated":"2016-09-21T20:24:55Z"}}}'
    http_version: 
  recorded_at: Wed, 03 May 2017 06:53:38 GMT
- request:
    method: get
    uri: https://search.datacite.org/api?fl=doi,xml,media,minted,updated&q=doi:10.17182/hepdata.77274.v1&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Maremma - https://github.com/datacite/maremma
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Access-Control-Allow-Methods:
      - GET, POST, OPTIONS
      Access-Control-Allow-Origin:
      - "*"
      Content-Type:
      - application/json;charset=UTF-8
      Date:
      - Wed, 03 May 2017 06:53:38 GMT
      Server:
      - openresty/1.11.2.2
      Connection:
      - keep-alive
    body:
      encoding: UTF-8
      string: '{"responseHeader":{"status":0,"QTime":1},"response":{"numFound":1,"start":0,"docs":[{"xml":"<resource xmlns="http://datacite.org/schema/kernel-3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-3 http://schema.datacite.org/meta/kernel-3/metadata.xsd">
    <identifier identifierType="DOI">10.17182/hepdata.77274.v1</identifier>
    <creators>
        
            
                <creator>
                    <creatorName>Adam, Jaroslav</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Adamova, Dagmar</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Aggarwal, Madan Mohan</creatorName>
                    <affiliation>Panjab U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Aglieri Rinella, Gianluca</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Agnello, Michelangelo</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Agrawal, Neelima</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ahammed, Zubayer</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ahmad, Shakeel</creatorName>
                    <affiliation>Aligarh Muslim U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ahn, Sang Un</creatorName>
                    <affiliation>KISTI, Daejeon</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Aiola, Salvatore</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Akindinov, Alexander</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alam, Sk Noor</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Silva De Albuquerque, Danilo</creatorName>
                    <affiliation>Campinas State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Aleksandrov, Dmitry</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alessandro, Bruno</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alexandre, Didier</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alfaro Molina, Jose Ruben</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alici, Andrea</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alkin, Anton</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Millan Almaraz, Jesus Roberto</creatorName>
                    <affiliation>Sinaloa U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alme, Johan</creatorName>
                    <affiliation>Bergen Coll. Higher Educ.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alt, Torsten</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Altinpinar, Sedat</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Altsybeev, Igor</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alves Garcia Prado, Caio</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Andrei, Cristian</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Andronic, Anton</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Anguelov, Venelin</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Anticic, Tome</creatorName>
                    <affiliation>Boskovic Inst., Zagreb</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Antinori, Federico</creatorName>
                    <affiliation>INFN, Padua</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Antonioli, Pietro</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Aphecetche, Laurent Bernard</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Appelshaeuser, Harald</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Arcelli, Silvia</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Arnaldi, Roberta</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Arnold, Oliver Werner</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Arsene, Ionut Cristian</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Arslandok, Mesut</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Audurier, Benjamin</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Augustinus, Andre</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Averbeck, Ralf Peter</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Azmi, Mohd Danish</creatorName>
                    <affiliation>Aligarh Muslim U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Badala, Angela</creatorName>
                    <affiliation>INFN, Catania</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Baek, Yong Wook</creatorName>
                    <affiliation>Konkuk U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bagnasco, Stefano</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bailhache, Raphaelle Marie</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bala, Renu</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Balasubramanian, Supraja</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Baldisseri, Alberto</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Baral, Rama Chandra</creatorName>
                    <affiliation>Bhubaneswar, Inst. Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Barbano, Anastasia Maria</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Barbera, Roberto</creatorName>
                    <affiliation>Catania U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Barile, Francesco</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Barnafoldi, Gergely Gabor</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Barnby, Lee Stuart</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ramillien Barret, Valerie</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bartalini, Paolo</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Barth, Klaus</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bartke, Jerzy Gustaw</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bartsch, Esther</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Basile, Maurizio</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bastid, Nicole</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Basu, Sumit</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bathen, Bastian</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Batigne, Guillaume</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Batista Camejo, Arianna</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Batyunya, Boris</creatorName>
                    <affiliation>Dubna, JINR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Batzing, Paul Christoph</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bearden, Ian Gardner</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Beck, Hans</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bedda, Cristina</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Behera, Nirbhay Kumar</creatorName>
                    <affiliation>Inha U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Belikov, Iouri</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bellini, Francesca</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bello Martinez, Hector</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bellwied, Rene</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Belmont Iii, Ronald John</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Belmont Moreno, Ernesto</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Espinoza Beltran, Lucina Gabriela</creatorName>
                    <affiliation>Sinaloa U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Belyaev, Vladimir</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bencedi, Gyula</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Beole, Stefania</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Berceanu, Ionela</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bercuci, Alexandru</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Berdnikov, Yaroslav</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Berenyi, Daniel</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bertens, Redmer Alexander</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Berzano, Dario</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Betev, Latchezar</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bhasin, Anju</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bhat, Inayat Rasool</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bhati, Ashok Kumar</creatorName>
                    <affiliation>Panjab U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bhattacharjee, Buddhadeb</creatorName>
                    <affiliation>Gauhati U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bhom, Jihyun</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bianchi, Livio</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bianchi, Nicola</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bianchin, Chiara</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bielcik, Jaroslav</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bielcikova, Jana</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bilandzic, Ante</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Biro, Gabor</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Biswas, Rathijit</creatorName>
                    <affiliation>Bose Inst., Kolkata</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Biswas, Saikat</creatorName>
                    <affiliation>Bose Inst., Kolkata</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bjelogrlic, Sandro</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Blair, Justin Thomas</creatorName>
                    <affiliation>Texas U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Blau, Dmitry</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Blume, Christoph</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bock, Friederike</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bogdanov, Alexey</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Boggild, Hans</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Boldizsar, Laszlo</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bombara, Marek</creatorName>
                    <affiliation>Kosice U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bonora, Matthias</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Book, Julian Heinz</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Borel, Herve</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Borissov, Alexander</creatorName>
                    <affiliation>Pusan Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Borri, Marcello</creatorName>
                    <affiliation>Liverpool U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bossu, Francesco</creatorName>
                    <affiliation>iThemba LABS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Botta, Elena</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bourjau, Christian</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Braun-Munzinger, Peter</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bregant, Marco</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Breitner, Timo Gunther</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Broker, Theo Alexander</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Browning, Tyler Allen</creatorName>
                    <affiliation>Purdue U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Broz, Michal</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Brucken, Erik Jens</creatorName>
                    <affiliation>Helsinki Inst. of Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bruna, Elena</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bruno, Giuseppe Eugenio</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Budnikov, Dmitry</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Buesching, Henner</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bufalino, Stefania</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Buncic, Predrag</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Busch, Oliver</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Buthelezi, Edith Zinhle</creatorName>
                    <affiliation>iThemba LABS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bashir Butt, Jamila</creatorName>
                    <affiliation>COMSATS, Islamabad</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Buxton, Jesse Thomas</creatorName>
                    <affiliation>Ohio State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cabala, Jan</creatorName>
                    <affiliation>Kosice Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Caffarri, Davide</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cai, Xu</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Caines, Helen Louise</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Calero Diaz, Liliet</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Caliva, Alberto</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Calvo Villar, Ernesto</creatorName>
                    <affiliation>Lima, Pont. U. Catolica</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Camerini, Paolo</creatorName>
                    <affiliation>Trieste U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Carena, Francesco</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Carena, Wisla</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Carnesecchi, Francesca</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Castillo Castellanos, Javier Ernesto</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Castro, Andrew John</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Casula, Ester Anna Rita</creatorName>
                    <affiliation>Cagliari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ceballos Sanchez, Cesar</creatorName>
                    <affiliation>Havana, CEADEN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cepila, Jan</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cerello, Piergiorgio</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cerkala, Jakub</creatorName>
                    <affiliation>Kosice Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chang, Beomsu</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chapeland, Sylvain</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chartier, Marielle</creatorName>
                    <affiliation>Liverpool U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Charvet, Jean-Luc Fernand</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chattopadhyay, Subhasis</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chattopadhyay, Sukalyan</creatorName>
                    <affiliation>Saha Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chauvin, Alex</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chelnokov, Volodymyr</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cherney, Michael Gerard</creatorName>
                    <affiliation>Creighton U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cheshkov, Cvetan Valeriev</creatorName>
                    <affiliation>Lyon, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cheynis, Brigitte</creatorName>
                    <affiliation>Lyon, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chibante Barroso, Vasco Miguel</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dobrigkeit Chinellato, David</creatorName>
                    <affiliation>Campinas State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cho, Soyeon</creatorName>
                    <affiliation>Inha U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chochula, Peter</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Choi, Kyungeon</creatorName>
                    <affiliation>Pusan Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chojnacki, Marek</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Choudhury, Subikash</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Christakoglou, Panagiotis</creatorName>
                    <affiliation>NIKHEF, Amsterdam</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Christensen, Christian Holm</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Christiansen, Peter</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chujo, Tatsuya</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chung, Suh-Urk</creatorName>
                    <affiliation>Pusan Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cicalo, Corrado</creatorName>
                    <affiliation>INFN, Cagliari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cifarelli, Luisa</creatorName>
                    <affiliation>Enrico Fermi Ctr., Rome</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cindolo, Federico</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cleymans, Jean Willy Andre</creatorName>
                    <affiliation>Cape Town U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Colamaria, Fabio Filippo</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Colella, Domenico</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Collu, Alberto</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Colocci, Manuel</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Conesa Balbastre, Gustavo</creatorName>
                    <affiliation>LPSC, Grenoble</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Conesa Del Valle, Zaida</creatorName>
                    <affiliation>Orsay, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Connors, Megan Elizabeth</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Contreras Nuno, Jesus Guillermo</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cormier, Thomas Michael</creatorName>
                    <affiliation>Oak Ridge</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Corrales Morales, Yasser</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cortes Maldonado, Ismael</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cortese, Pietro</creatorName>
                    <affiliation>Piemonte Orientale U., Alessandria</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cosentino, Mauro Rogerio</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Costa, Filippo</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Crkovska, Jana</creatorName>
                    <affiliation>Orsay, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Crochet, Philippe</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cruz Albino, Rigoberto</creatorName>
                    <affiliation>CINVESTAV, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cuautle Flores, Eleazar</creatorName>
                    <affiliation>Mexico U., ICN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cunqueiro Mendez, Leticia</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dahms, Torsten</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dainese, Andrea</creatorName>
                    <affiliation>INFN, Padua</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Danisch, Meike Charlotte</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Danu, Andrea</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Das, Debasish</creatorName>
                    <affiliation>Saha Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Das, Indranil</creatorName>
                    <affiliation>Saha Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Das, Supriya</creatorName>
                    <affiliation>Bose Inst., Kolkata</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dash, Ajay Kumar</creatorName>
                    <affiliation>Bhubaneswar, NISER</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dash, Sadhana</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De, Sudipan</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Caro, Annalisa</creatorName>
                    <affiliation>Enrico Fermi Ctr., Rome</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Cataldo, Giacinto</creatorName>
                    <affiliation>INFN, Bari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Conti, Camila</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Cuveland, Jan</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Falco, Alessandro</creatorName>
                    <affiliation>Cagliari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Gruttola, Daniele</creatorName>
                    <affiliation>Enrico Fermi Ctr., Rome</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Marco, Nora</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Pasquale, Salvatore</creatorName>
                    <affiliation>Salerno U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Derradi De Souza, Rafael</creatorName>
                    <affiliation>Campinas State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Deisting, Alexander</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Deloff, Andrzej</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Denes, Ervin Sandor</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Deplano, Caterina</creatorName>
                    <affiliation>NIKHEF, Amsterdam</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dhankher, Preeti</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Di Bari, Domenico</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Di Mauro, Antonio</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Di Nezza, Pasquale</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Di Ruzza, Benedetto</creatorName>
                    <affiliation>INFN, Padua</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Diaz Corchero, Miguel Angel</creatorName>
                    <affiliation>Madrid, CIEMAT</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dietel, Thomas</creatorName>
                    <affiliation>Cape Town U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dillenseger, Pascal</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Divia, Roberto</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Djuvsland, Oeystein</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dobrin, Alexandru Florin</creatorName>
                    <affiliation>NIKHEF, Amsterdam</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Domenicis Gimenez, Diogenes</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Donigus, Benjamin</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dordic, Olja</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Drozhzhova, Tatiana</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dubey, Anand Kumar</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dubla, Andrea</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ducroux, Laurent</creatorName>
                    <affiliation>Lyon, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dupieux, Pascal</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ehlers Iii, Raymond James</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Elia, Domenico</creatorName>
                    <affiliation>INFN, Bari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Endress, Eric</creatorName>
                    <affiliation>Lima, Pont. U. Catolica</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Engel, Heiko</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Epple, Eliane</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Erazmus, Barbara Ewa</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Erdemir, Irem</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Erhardt, Filip</creatorName>
                    <affiliation>Zagreb U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Espagnon, Bruno</creatorName>
                    <affiliation>Orsay, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Estienne, Magali Danielle</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Esumi, Shinichi</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Eum, Jongsik</creatorName>
                    <affiliation>Pusan Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Evans, David</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Evdokimov, Sergey</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Eyyubova, Gyulnara</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fabbietti, Laura</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fabris, Daniela</creatorName>
                    <affiliation>INFN, Padua</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Faivre, Julien</creatorName>
                    <affiliation>LPSC, Grenoble</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fantoni, Alessandra</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fasel, Markus</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Feldkamp, Linus</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Feliciello, Alessandro</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Feofilov, Grigorii</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ferencei, Jozef</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fernandez Tellez, Arturo</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gonzalez Ferreiro, Elena</creatorName>
                    <affiliation>Santiago de Compostela U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ferretti, Alessandro</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Festanti, Andrea</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Feuillard, Victor Jose Gaston</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Figiel, Jan</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Araujo Silva Figueredo, Marcel</creatorName>
                    <affiliation>Liverpool U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Filchagin, Sergey</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Finogeev, Dmitry</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fionda, Fiorella</creatorName>
                    <affiliation>Cagliari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fiore, Enrichetta Maria</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fleck, Martin Gabriel</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Floris, Michele</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Foertsch, Siegfried Valentin</creatorName>
                    <affiliation>iThemba LABS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Foka, Panagiota</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fokin, Sergey</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fragiacomo, Enrico</creatorName>
                    <affiliation>INFN, Trieste</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Francescon, Andrea</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Francisco, Audrey</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Frankenfeld, Ulrich Michael</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fronze, Gabriele Gaetano</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fuchs, Ulrich</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Furget, Christophe</creatorName>
                    <affiliation>LPSC, Grenoble</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Furs, Artur</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fusco Girard, Mario</creatorName>
                    <affiliation>Salerno U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gaardhoeje, Jens Joergen</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gagliardi, Martino</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gago Medina, Alberto Martin</creatorName>
                    <affiliation>Lima, Pont. U. Catolica</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gajdosova, Katarina</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gallio, Mauro</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Duarte Galvan, Carlos</creatorName>
                    <affiliation>Sinaloa U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gangadharan, Dhevan Raja</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ganoti, Paraskevi</creatorName>
                    <affiliation>Athens U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gao, Chaosong</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Garabatos Cuadrado, Jose</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Garcia-Solis, Edmundo Javier</creatorName>
                    <affiliation>Chicago State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gargiulo, Corrado</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gasik, Piotr Jan</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gauger, Erin Frances</creatorName>
                    <affiliation>Texas U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Germain, Marie</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gheata, Mihaela</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ghosh, Premomoy</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ghosh, Sanjay Kumar</creatorName>
                    <affiliation>Bose Inst., Kolkata</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gianotti, Paola</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Giubellino, Paolo</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Giubilato, Piero</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gladysz-Dziadus, Ewa</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Glassel, Peter</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gomez Coral, Diego Mauricio</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gomez Ramirez, Andres</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sanchez Gonzalez, Andres</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gonzalez, Victor</creatorName>
                    <affiliation>Madrid, CIEMAT</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gonzalez Zamora, Pedro</creatorName>
                    <affiliation>Madrid, CIEMAT</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gorbunov, Sergey</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gorlich, Lidia Maria</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gotovac, Sven</creatorName>
                    <affiliation>Split Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grabski, Varlen</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grachov, Oleg Anatolievich</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Graczykowski, Lukasz Kamil</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Graham, Katie Leanne</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grelli, Alessandro</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grigoras, Alina Gabriela</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grigoras, Costin</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grigoryev, Vladislav</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grigoryan, Ara</creatorName>
                    <affiliation>Yerevan Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grigoryan, Smbat</creatorName>
                    <affiliation>Dubna, JINR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grynyov, Borys</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grion, Nevio</creatorName>
                    <affiliation>INFN, Trieste</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gronefeld, Julius Maximilian</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grosse-Oetringhaus, Jan Fiete</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grosso, Raffaele</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gruber, Lukas</creatorName>
                    <affiliation>Stefan Meyer Inst. Subatomare Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Guber, Fedor</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Guernane, Rachid</creatorName>
                    <affiliation>LPSC, Grenoble</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Guerzoni, Barbara</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gulbrandsen, Kristjan Herlache</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gunji, Taku</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gupta, Anik</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gupta, Ramni</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Haake, Rudiger</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hadjidakis, Cynthia Marie</creatorName>
                    <affiliation>Orsay, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Haiduc, Maria</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hamagaki, Hideki</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hamar, Gergoe</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hamon, Julien Charles</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Harris, John William</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Harton, Austin Vincent</creatorName>
                    <affiliation>Chicago State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hatzifotiadou, Despina</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hayashi, Shinichi</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Heckel, Stefan Thomas</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hellbar, Ernst</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Helstrup, Haavard</creatorName>
                    <affiliation>Bergen Coll. Higher Educ.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Herghelegiu, Andrei Ionut</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Herrera Corral, Gerardo Antonio</creatorName>
                    <affiliation>CINVESTAV, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hess, Benjamin Andreas</creatorName>
                    <affiliation>Tubingen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hetland, Kristin Fanebust</creatorName>
                    <affiliation>Bergen Coll. Higher Educ.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hillemanns, Hartmut</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hippolyte, Boris</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Horak, David</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hosokawa, Ritsuya</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hristov, Peter Zahariev</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hughes, Charles</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Humanic, Thomas</creatorName>
                    <affiliation>Ohio State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hussain, Nur</creatorName>
                    <affiliation>Gauhati U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hussain, Tahir</creatorName>
                    <affiliation>Aligarh Muslim U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hutter, Dirk</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hwang, Dae Sung</creatorName>
                    <affiliation>Sejong U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ilkaev, Radiy</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Inaba, Motoi</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Incani, Elisa</creatorName>
                    <affiliation>Cagliari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ippolitov, Mikhail</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Irfan, Muhammad</creatorName>
                    <affiliation>Aligarh Muslim U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Isakov, Vladimir</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ivanov, Marian</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ivanov, Vladimir</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Izucheev, Vladimir</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jacak, Barbara</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jacazio, Nicolo</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jacobs, Peter Martin</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jadhav, Manoj Bhanudas</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jadlovska, Slavka</creatorName>
                    <affiliation>Kosice Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jadlovsky, Jan</creatorName>
                    <affiliation>Kosice Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jahnke, Cristiane</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jakubowska, Monika Joanna</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Janik, Malgorzata Anna</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pahula Hewage, Sandun</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jena, Chitrasen</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jena, Satyajit</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jimenez Bustamante, Raul Tonatiuh</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jones, Peter Graham</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jusko, Anton</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kalinak, Peter</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kalweit, Alexander Philipp</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kang, Ju Hwan</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kaplin, Vladimir</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kar, Somnath</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Karasu Uysal, Ayben</creatorName>
                    <affiliation>Karatay U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Karavichev, Oleg</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Karavicheva, Tatiana</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Karayan, Lilit</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Karpechev, Evgeny</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kebschull, Udo Wolfgang</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Keidel, Ralf</creatorName>
                    <affiliation>Fachhochsch., Worms</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Keijdener, Darius Laurens</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Keil, Markus</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Khan, Mohammed Mohisin</creatorName>
                    <affiliation>Aligarh Muslim U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Khan, Palash</creatorName>
                    <affiliation>Saha Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Khan, Shuaib Ahmad</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Khanzadeev, Alexei</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kharlov, Yury</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kileng, Bjarte</creatorName>
                    <affiliation>Bergen Coll. Higher Educ.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Do Won</creatorName>
                    <affiliation>Gangneung-Wonju Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Dong Jo</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Daehyeok</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Hyeonjoong</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Jinsook</creatorName>
                    <affiliation>Gangneung-Wonju Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Jiyoung</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Minwoo</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Se Yong</creatorName>
                    <affiliation>Sejong U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Taesoo</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kirsch, Stefan</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kisel, Ivan</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kiselev, Sergey</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kisiel, Adam Ryszard</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kiss, Gabor</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Klay, Jennifer Lynn</creatorName>
                    <affiliation>Cal. Poly.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Klein, Carsten</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Klein, Jochen</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Klein-Boesing, Christian</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Klewin, Sebastian</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kluge, Alexander</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Knichel, Michael Linus</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Knospe, Anders Garritt</creatorName>
                    <affiliation>Texas U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kobdaj, Chinorat</creatorName>
                    <affiliation>Suranaree U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kofarago, Monika</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kollegger, Thorsten</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kolozhvari, Anatoly</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kondratev, Valerii</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kondratyeva, Natalia</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kondratyuk, Evgeny</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Konevskikh, Artem</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kopcik, Michal</creatorName>
                    <affiliation>Kosice Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kour, Mandeep</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kouzinopoulos, Charalampos</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kovalenko, Oleksandr</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kovalenko, Vladimir</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kowalski, Marek</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Koyithatta Meethaleveedu, Greeshma</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kralik, Ivan</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kravcakova, Adela</creatorName>
                    <affiliation>Kosice U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Krivda, Marian</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Krizek, Filip</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kryshen, Evgeny</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Krzewicki, Mikolaj</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kubera, Andrew Michael</creatorName>
                    <affiliation>Ohio State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kucera, Vit</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kuhn, Christian Claude</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kuijer, Paulus Gerardus</creatorName>
                    <affiliation>NIKHEF, Amsterdam</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kumar, Ajay</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kumar, Jitendra</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kumar, Lokesh</creatorName>
                    <affiliation>Panjab U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kumar, Shyam</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kurashvili, Podist</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kurepin, Alexander</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kurepin, Alexey</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kuryakin, Alexey</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kweon, Min Jung</creatorName>
                    <affiliation>Inha U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kwon, Youngil</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>La Pointe, Sarah Louise</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>La Rocca, Paola</creatorName>
                    <affiliation>Catania U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ladron De Guevara, Pedro</creatorName>
                    <affiliation>CINVESTAV, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lagana Fernandes, Caio</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lakomov, Igor</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Langoy, Rune</creatorName>
                    <affiliation>Vestfold U. Coll., Tonsberg</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lapidus, Kirill</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lara Martinez, Camilo Ernesto</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lardeux, Antoine Xavier</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lattuca, Alessandra</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Laudi, Elisa</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lea, Ramona</creatorName>
                    <affiliation>Trieste U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Leardini, Lucia</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lee, Seongjoo</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lehas, Fatiha</creatorName>
                    <affiliation>NIKHEF, Amsterdam</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lehner, Sebastian</creatorName>
                    <affiliation>Stefan Meyer Inst. Subatomare Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lemmon, Roy Crawford</creatorName>
                    <affiliation>Daresbury</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lenti, Vito</creatorName>
                    <affiliation>INFN, Bari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Leogrande, Emilia</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Leon Monzon, Ildefonso</creatorName>
                    <affiliation>Sinaloa U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Leon Vargas, Hermes</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Leoncino, Marco</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Levai, Peter</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Li, Shuang</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Li, Xiaomei</creatorName>
                    <affiliation>Beijing, Inst. Atomic Energy</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lien, Jorgen Andre</creatorName>
                    <affiliation>Vestfold U. Coll., Tonsberg</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lietava, Roman</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lindal, Svein</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lindenstruth, Volker</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lippmann, Christian</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lisa, Michael Annan</creatorName>
                    <affiliation>Ohio State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ljunggren, Hans Martin</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lodato, Davide Francesco</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lonne, Per-Ivar</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Loginov, Vitaly</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Loizides, Constantinos</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lopez, Xavier Bernard</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lopez Torres, Ernesto</creatorName>
                    <affiliation>Havana, CEADEN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lowe, Andrew John</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Luettig, Philipp Johannes</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lunardon, Marcello</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Luparello, Grazia</creatorName>
                    <affiliation>Trieste U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lupi, Matteo</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lutz, Tyler Harrison</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Maevskaya, Alla</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mager, Magnus</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mahajan, Sanjay</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mahmood, Sohail Musa</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Maire, Antonin</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Majka, Richard Daniel</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Malaev, Mikhail</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Maldonado Cervantes, Ivonne Alicia</creatorName>
                    <affiliation>Mexico U., ICN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Malinina, Liudmila</creatorName>
                    <affiliation>SINP, Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mal&#39;Kevich, Dmitry</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Malzacher, Peter</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mamonov, Alexander</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Manko, Vladislav</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Manso, Franck</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Manzari, Vito</creatorName>
                    <affiliation>INFN, Bari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mao, Yaxian</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Marchisone, Massimiliano</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mares, Jiri</creatorName>
                    <affiliation>Prague, Inst. Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Margagliotti, Giacomo Vito</creatorName>
                    <affiliation>Trieste U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Margotti, Anselmo</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Margutti, Jacopo</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Marin, Ana Maria</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Markert, Christina</creatorName>
                    <affiliation>Texas U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Marquard, Marco</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Martin, Nicole Alice</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Martinengo, Paolo</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Martinez Hernandez, Mario Ivan</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Martinez-Garcia, Gines</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Martinez Pedreira, Miguel</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mas, Alexis Jean-Michel</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Masciocchi, Silvia</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Masera, Massimo</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Masoni, Alberto</creatorName>
                    <affiliation>INFN, Cagliari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mastroserio, Annalisa</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Matyja, Adam Tomasz</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mayer, Christoph</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mazer, Joel Anthony</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mazzoni, Alessandra Maria</creatorName>
                    <affiliation>INFN, Rome</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mcdonald, Daniel</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Meddi, Franco</creatorName>
                    <affiliation>Rome U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Melikyan, Yuri</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Menchaca-Rocha, Arturo Alejandro</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Meninno, Elisa</creatorName>
                    <affiliation>Salerno U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mercado-Perez, Jorge</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Meres, Michal</creatorName>
                    <affiliation>Comenius U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mhlanga, Sibaliso</creatorName>
                    <affiliation>Cape Town U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Miake, Yasuo</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mieskolainen, Matti Mikael</creatorName>
                    <affiliation>Helsinki Inst. of Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mikhaylov, Konstantin</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Milano, Leonardo</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Milosevic, Jovan</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mischke, Andre</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mishra, Aditya Nath</creatorName>
                    <affiliation>Indian Inst. Tech., Indore</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Miskowiec, Dariusz Czeslaw</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mitra, Jubin</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mitu, Ciprian Mihai</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mohammadi, Naghmeh</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mohanty, Bedangadas</creatorName>
                    <affiliation>Bhubaneswar, NISER</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Molnar, Levente</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Montano Zetina, Luis Manuel</creatorName>
                    <affiliation>CINVESTAV, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Montes Prado, Esther</creatorName>
                    <affiliation>Madrid, CIEMAT</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Moreira De Godoy, Denise Aparecida</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Perez Moreno, Luis Alberto</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Moretto, Sandra</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Morreale, Astrid</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Morsch, Andreas</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Muccifora, Valeria</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mudnic, Eugen</creatorName>
                    <affiliation>Split Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Muhlheim, Daniel Michael</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Muhuri, Sanjib</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mukherjee, Maitreyee</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mulligan, James Declan</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gameiro Munhoz, Marcelo</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Munning, Konstantin</creatorName>
                    <affiliation>Bonn U., HISKP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Munzer, Robert Helmut</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Murakami, Hikari</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Murray, Sean</creatorName>
                    <affiliation>iThemba LABS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Musa, Luciano</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Musinsky, Jan</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Naik, Bharati</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nair, Rahul</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nandi, Basanta Kumar</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nania, Rosario</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nappi, Eugenio</creatorName>
                    <affiliation>INFN, Bari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Naru, Muhammad Umair</creatorName>
                    <affiliation>COMSATS, Islamabad</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ferreira Natal Da Luz, Pedro Hugo</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nattrass, Christine</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rosado Navarro, Sebastian</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nayak, Kishora</creatorName>
                    <affiliation>Bhubaneswar, NISER</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nayak, Ranjit</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nayak, Tapan Kumar</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nazarenko, Sergey</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nedosekin, Alexander</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Negrao De Oliveira, Renato Aparecido</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nellen, Lukas</creatorName>
                    <affiliation>Mexico U., ICN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ng, Fabian</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nicassio, Maria</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Niculescu, Mihai</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Niedziela, Jeremi</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nielsen, Borge Svane</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nikolaev, Sergey</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nikulin, Sergey</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nikulin, Vladimir</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Noferini, Francesco</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nomokonov, Petr</creatorName>
                    <affiliation>Dubna, JINR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nooren, Gerardus</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cabanillas Noris, Juan Carlos</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Norman, Jaime</creatorName>
                    <affiliation>Liverpool U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nyanin, Alexander</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nystrand, Joakim Ingemar</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oeschler, Helmut Oskar</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oh, Saehanseul</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oh, Sun Kun</creatorName>
                    <affiliation>Konkuk U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ohlson, Alice Elisabeth</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Okatan, Ali</creatorName>
                    <affiliation>Karatay U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Okubo, Tsubasa</creatorName>
                    <affiliation>Hiroshima U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oleniacz, Janusz</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oliveira Da Silva, Antonio Carlos</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oliver, Michael Henry</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Onderwaater, Jacobus</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oppedisano, Chiara</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Orava, Risto</creatorName>
                    <affiliation>Helsinki Inst. of Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oravec, Matej</creatorName>
                    <affiliation>Kosice Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ortiz Velasquez, Antonio</creatorName>
                    <affiliation>Mexico U., ICN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oskarsson, Anders Nils Erik</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Otwinowski, Jacek Tomasz</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oyama, Ken</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ozdemir, Mahmut</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pachmayer, Yvonne Chiara</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pagano, Davide</creatorName>
                    <affiliation>U. Brescia</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pagano, Paola</creatorName>
                    <affiliation>Salerno U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Paic, Guy</creatorName>
                    <affiliation>Mexico U., ICN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pal, Susanta Kumar</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Palni, Prabhakar</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pan, Jinjin</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pandey, Ashutosh Kumar</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Papikyan, Vardanush</creatorName>
                    <affiliation>Yerevan Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pappalardo, Giuseppe</creatorName>
                    <affiliation>INFN, Catania</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pareek, Pooja</creatorName>
                    <affiliation>Indian Inst. Tech., Indore</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Park, Woojin</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Parmar, Sonia</creatorName>
                    <affiliation>Panjab U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Passfeld, Annika</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Paticchio, Vincenzo</creatorName>
                    <affiliation>INFN, Bari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Patra, Rajendra Nath</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Paul, Biswarup</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pei, Hua</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Peitzmann, Thomas</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Peng, Xinye</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pereira Da Costa, Hugo Denis Antonio</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Peresunko, Dmitry Yurevich</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Perez Lezama, Edgar</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Peskov, Vladimir</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pestov, Yury</creatorName>
                    <affiliation>Novosibirsk, IYF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Petracek, Vojtech</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Petrov, Viacheslav</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Petrovici, Mihai</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Petta, Catia</creatorName>
                    <affiliation>Catania U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Piano, Stefano</creatorName>
                    <affiliation>INFN, Trieste</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pikna, Miroslav</creatorName>
                    <affiliation>Comenius U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pillot, Philippe</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ozelin De Lima Pimentel, Lais</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pinazza, Ombretta</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pinsky, Lawrence</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Piyarathna, Danthasinghe</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ploskon, Mateusz Andrzej</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Planinic, Mirko</creatorName>
                    <affiliation>Zagreb U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pluta, Jan Marian</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pochybova, Sona</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Podesta Lerma, Pedro Luis Manuel</creatorName>
                    <affiliation>Sinaloa U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Poghosyan, Martin</creatorName>
                    <affiliation>Oak Ridge</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Polishchuk, Boris</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Poljak, Nikola</creatorName>
                    <affiliation>Zagreb U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Poonsawat, Wanchaloem</creatorName>
                    <affiliation>Suranaree U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pop, Amalia</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Poppenborg, Hendrik</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Porteboeuf, Sarah Julie</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Porter, R Jefferson</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pospisil, Jan</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Prasad, Sidharth Kumar</creatorName>
                    <affiliation>Bose Inst., Kolkata</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Preghenella, Roberto</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Prino, Francesco</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pruneau, Claude Andre</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pshenichnov, Igor</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Puccio, Maximiliano</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Puddu, Giovanna</creatorName>
                    <affiliation>Cagliari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pujahari, Prabhat Ranjan</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Punin, Valery</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Putschke, Jorn Henning</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Qvigstad, Henrik</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rachevski, Alexandre</creatorName>
                    <affiliation>INFN, Trieste</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Raha, Sibaji</creatorName>
                    <affiliation>Bose Inst., Kolkata</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rajput, Sonia</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rak, Jan</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rakotozafindrabe, Andry Malala</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ramello, Luciano</creatorName>
                    <affiliation>Piemonte Orientale U., Alessandria</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rami, Fouad</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Raniwala, Rashmi</creatorName>
                    <affiliation>Rajasthan U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Raniwala, Sudhir</creatorName>
                    <affiliation>Rajasthan U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rasanen, Sami Sakari</creatorName>
                    <affiliation>Helsinki Inst. of Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rascanu, Bogdan Theodor</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rathee, Deepika</creatorName>
                    <affiliation>Panjab U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Read, Kenneth Francis</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Redlich, Krzysztof</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Reed, Rosi Jan</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rehman, Attiq Ur</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Reichelt, Patrick Simon</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Reidt, Felix</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ren, Xiaowen</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Renfordt, Rainer Arno Ernst</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Reolon, Anna Rita</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Reshetin, Andrey</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Reygers, Klaus Johannes</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Riabov, Viktor</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ricci, Renato Angelo</creatorName>
                    <affiliation>INFN, Legnaro</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Richert, Tuva Ora Herenui</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Richter, Matthias Rudolph</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Riedler, Petra</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Riegler, Werner</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Riggi, Francesco</creatorName>
                    <affiliation>Catania U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ristea, Catalin-Lucian</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rocco, Elena</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rodriguez Cahuantzi, Mario</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rodriguez Manso, Alis</creatorName>
                    <affiliation>NIKHEF, Amsterdam</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Roeed, Ketil</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rogochaya, Elena</creatorName>
                    <affiliation>Dubna, JINR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rohr, David Michael</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Roehrich, Dieter</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ronchetti, Federico</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ronflette, Lucile</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rosnet, Philippe</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rossi, Andrea</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Roukoutakis, Filimon</creatorName>
                    <affiliation>Athens U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Roy, Ankhi</creatorName>
                    <affiliation>Indian Inst. Tech., Indore</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Roy, Christelle Sophie</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Roy, Pradip Kumar</creatorName>
                    <affiliation>Saha Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rubio Montero, Antonio Juan</creatorName>
                    <affiliation>Madrid, CIEMAT</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rui, Rinaldo</creatorName>
                    <affiliation>Trieste U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Russo, Riccardo</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ryabinkin, Evgeny</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ryabov, Yury</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rybicki, Andrzej</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Saarinen, Sampo</creatorName>
                    <affiliation>Helsinki Inst. of Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sadhu, Samrangy</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sadovskiy, Sergey</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Safarik, Karel</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sahlmuller, Baldo</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sahoo, Pragati</creatorName>
                    <affiliation>Indian Inst. Tech., Indore</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sahoo, Raghunath</creatorName>
                    <affiliation>Indian Inst. Tech., Indore</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sahoo, Sarita</creatorName>
                    <affiliation>Bhubaneswar, Inst. Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sahu, Pradip Kumar</creatorName>
                    <affiliation>Bhubaneswar, Inst. Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Saini, Jogender</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sakai, Shingo</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Saleh, Mohammad Ahmad</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Salzwedel, Jai Samuel Nielsen</creatorName>
                    <affiliation>Ohio State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sambyal, Sanjeev Singh</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Samsonov, Vladimir</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sandor, Ladislav</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sandoval, Andres</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sano, Masato</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sarkar, Debojit</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sarkar, Nachiketa</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sarma, Pranjal</creatorName>
                    <affiliation>Gauhati U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Scapparone, Eugenio</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Scarlassara, Fernando</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schiaua, Claudiu Cornel</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schicker, Rainer Martin</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schmidt, Christian Joachim</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schmidt, Hans Rudolf</creatorName>
                    <affiliation>Tubingen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schmidt, Martin</creatorName>
                    <affiliation>Tubingen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schuchmann, Simone</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schukraft, Jurgen</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schutz, Yves Roland</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schwarz, Kilian Eberhard</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schweda, Kai Oliver</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Scioli, Gilda</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Scomparin, Enrico</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Scott, Rebecca Michelle</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sefcik, Michal</creatorName>
                    <affiliation>Kosice U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Seger, Janet Elizabeth</creatorName>
                    <affiliation>Creighton U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sekiguchi, Yuko</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sekihata, Daiki</creatorName>
                    <affiliation>Hiroshima U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Selyuzhenkov, Ilya</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Senosi, Kgotlaesele</creatorName>
                    <affiliation>iThemba LABS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Senyukov, Serhiy</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Serradilla Rodriguez, Eulogio</creatorName>
                    <affiliation>Madrid, CIEMAT</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sevcenco, Adrian</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shabanov, Arseniy</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shabetai, Alexandre</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shadura, Oksana</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shahoyan, Ruben</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shangaraev, Artem</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sharma, Ankita</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sharma, Mona</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sharma, Monika</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sharma, Natasha</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sheikh, Ashik Ikbal</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shigaki, Kenta</creatorName>
                    <affiliation>Hiroshima U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shou, Qiye</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shtejer Diaz, Katherin</creatorName>
                    <affiliation>Havana, CEADEN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sibiryak, Yury</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Siddhanta, Sabyasachi</creatorName>
                    <affiliation>INFN, Cagliari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sielewicz, Krzysztof Marek</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Siemiarczuk, Teodor</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Silvermyr, David Olle Rickard</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Silvestre, Catherine Micaela</creatorName>
                    <affiliation>LPSC, Grenoble</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Simatovic, Goran</creatorName>
                    <affiliation>Zagreb U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Simonetti, Giuseppe</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Singaraju, Rama Narayana</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Singh, Ranbir</creatorName>
                    <affiliation>Bhubaneswar, NISER</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Singhal, Vikas</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sarkar - Sinha, Tinku</creatorName>
                    <affiliation>Saha Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sitar, Branislav</creatorName>
                    <affiliation>Comenius U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sitta, Mario</creatorName>
                    <affiliation>Piemonte Orientale U., Alessandria</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Skaali, Bernhard</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Slupecki, Maciej</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Smirnov, Nikolai</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Snellings, Raimond</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Snellman, Tomas Wilhelm</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Song, Jihye</creatorName>
                    <affiliation>Pusan Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Song, Myunggeun</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Song, Zixuan</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Soramel, Francesca</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sorensen, Soren Pontoppidan</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sozzi, Federica</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Spiriti, Eleuterio</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sputowska, Iwona Anna</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Spyropoulou-Stassinaki, Martha</creatorName>
                    <affiliation>Athens U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Stachel, Johanna</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Stan, Ionel</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Stankus, Paul</creatorName>
                    <affiliation>Oak Ridge</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Stenlund, Evert Anders</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Steyn, Gideon Francois</creatorName>
                    <affiliation>iThemba LABS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Stiller, Johannes Hendrik</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Stocco, Diego</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Strmen, Peter</creatorName>
                    <affiliation>Comenius U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alarcon Do Passo Suaide, Alexandre</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sugitate, Toru</creatorName>
                    <affiliation>Hiroshima U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Suire, Christophe Pierre</creatorName>
                    <affiliation>Orsay, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Suleymanov, Mais Kazim Oglu</creatorName>
                    <affiliation>COMSATS, Islamabad</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Suljic, Miljenko</creatorName>
                    <affiliation>Trieste U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sultanov, Rishat</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sumbera, Michal</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sumowidagdo, Suharyo</creatorName>
                    <affiliation>Jakarta LIPI, Indonesian Inst. Sci.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Szabo, Alexander</creatorName>
                    <affiliation>Comenius U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Szarka, Imrich</creatorName>
                    <affiliation>Comenius U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Szczepankiewicz, Adam</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Szymanski, Maciej Pawel</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tabassam, Uzma</creatorName>
                    <affiliation>COMSATS, Islamabad</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Takahashi, Jun</creatorName>
                    <affiliation>Campinas State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tambave, Ganesh Jagannath</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tanaka, Naoto</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tarhini, Mohamad</creatorName>
                    <affiliation>Orsay, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tariq, Mohammad</creatorName>
                    <affiliation>Aligarh Muslim U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tarzila, Madalina-Gabriela</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tauro, Arturo</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tejeda Munoz, Guillermo</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Telesca, Adriana</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Terasaki, Kohei</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Terrevoli, Cristina</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Teyssier, Boris</creatorName>
                    <affiliation>Lyon, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Thaeder, Jochen Mathias</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Thakur, Dhananjaya</creatorName>
                    <affiliation>Indian Inst. Tech., Indore</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Thomas, Deepa</creatorName>
                    <affiliation>Texas U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tieulent, Raphael Noel</creatorName>
                    <affiliation>Lyon, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tikhonov, Anatoly</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Timmins, Anthony Robert</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Toia, Alberica</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Trogolo, Stefano</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Trombetta, Giuseppe</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Trubnikov, Victor</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Trzaska, Wladyslaw Henryk</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tsuji, Tomoya</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tumkin, Alexandr</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Turrisi, Rosario</creatorName>
                    <affiliation>INFN, Padua</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tveter, Trine Spedstad</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ullaland, Kjetil</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Uras, Antonio</creatorName>
                    <affiliation>Lyon, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Usai, Gianluca</creatorName>
                    <affiliation>Cagliari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Utrobicic, Antonija</creatorName>
                    <affiliation>Zagreb U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vala, Martin</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Valencia Palomo, Lizardo</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vallero, Sara</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Van Der Maarel, Jasper</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Van Hoorne, Jacobus Willem</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Van Leeuwen, Marco</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vanat, Tomas</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vande Vyvre, Pierre</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Varga, Dezso</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Diozcora Vargas Trevino, Aurora</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vargyas, Marton</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Varma, Raghava</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vasileiou, Maria</creatorName>
                    <affiliation>Athens U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vasiliev, Andrey</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vauthier, Astrid</creatorName>
                    <affiliation>LPSC, Grenoble</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vazquez Doce, Oton</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vechernin, Vladimir</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Veen, Annelies Marianne</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Veldhoen, Misha</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Velure, Arild</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vercellin, Ermanno</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vergara Limon, Sergio</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vernet, Renaud</creatorName>
                    <affiliation>CC, Villeurbanne</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Verweij, Marta</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vickovic, Linda</creatorName>
                    <affiliation>Split Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Viinikainen, Jussi Samuli</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vilakazi, Zabulon</creatorName>
                    <affiliation>Witwatersrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Villalobos Baillie, Orlando</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Villatoro Tello, Abraham</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vinogradov, Alexander</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vinogradov, Leonid</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Virgili, Tiziano</creatorName>
                    <affiliation>Salerno U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vislavicius, Vytautas</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Viyogi, Yogendra</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vodopyanov, Alexander</creatorName>
                    <affiliation>Dubna, JINR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Volkl, Martin Andreas</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Voloshin, Kirill</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Voloshin, Sergey</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Volpe, Giacomo</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Von Haller, Barthelemy</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vorobyev, Ivan</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vranic, Danilo</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vrlakova, Janka</creatorName>
                    <affiliation>Kosice U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vulpescu, Bogdan</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wagner, Boris</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wagner, Jan</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wang, Hongkai</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wang, Mengliang</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Watanabe, Daisuke</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Watanabe, Yosuke</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Weber, Michael</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Weber, Steffen Georg</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Weiser, Dennis Franz</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wessels, Johannes Peter</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Westerhoff, Uwe</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Whitehead, Andile Mothegi</creatorName>
                    <affiliation>Cape Town U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wiechula, Jens</creatorName>
                    <affiliation>Tubingen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wikne, Jon</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wilk, Grzegorz Andrzej</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wilkinson, Jeremy John</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Willems, Guido Alexander</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Williams, Crispin</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Windelband, Bernd Stefan</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Winn, Michael Andreas</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yalcin, Serpil</creatorName>
                    <affiliation>Karatay U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yang, Ping</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yano, Satoshi</creatorName>
                    <affiliation>Hiroshima U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yin, Zhongbao</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yokoyama, Hiroki</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yoo, In-Kwon</creatorName>
                    <affiliation>Pusan Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yoon, Jin Hee</creatorName>
                    <affiliation>Inha U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yurchenko, Volodymyr</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zaborowska, Anna</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zaccolo, Valentina</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zaman, Ali</creatorName>
                    <affiliation>COMSATS, Islamabad</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zampolli, Chiara</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Correia Zanoli, Henrique Jose</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zaporozhets, Sergey</creatorName>
                    <affiliation>Dubna, JINR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zardoshti, Nima</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zarochentsev, Andrey</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zavada, Petr</creatorName>
                    <affiliation>Prague, Inst. Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zavyalov, Nikolay</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zbroszczyk, Hanna Paulina</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zgura, Sorin Ion</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhalov, Mikhail</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhang, Haitao</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhang, Xiaoming</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhang, Yonghong</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chunhui, Zhang</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhang, Zuman</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhao, Chengxin</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhigareva, Natalia</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhou, Daicui</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhou, You</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhou, Zhuo</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhu, Hongsheng</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhu, Jianhui</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zichichi, Antonino</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zimmermann, Alice</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zimmermann, Markus Bernhard</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zinovjev, Gennady</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zyzak, Maksym</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
        
    </creators>
    <dates>
        <date dateType="Updated">2017-04-07 15:04:22.409791</date>
    </dates>
    <titles>
        <title>Measurement of azimuthal correlations of D mesons and charged particles in pp collisions at $\sqrt{s}=7$ TeV and p-Pb collisions at $\sqrt{s_{\rm NN}}=5.02$ TeV</title>
    </titles>
    <publisher>No Journal Information</publisher>
    <publicationYear>2016</publicationYear>

    <language>eng</language>
    <resourceType resourceTypeGeneral="Collection">Collection</resourceType>
    <version>1</version>
    <descriptions>
        <description descriptionType="Abstract">
            The azimuthal correlations of D mesons and charged particles were measured with the ALICE detector in pp collisions at $\sqrt{s}=7$ TeV and p-Pb collisions at $\sqrt{s_{\rm NN}}=5.02$ TeV at the Large Hadron Collider. D$^0$, D$^+$, and D$^{*+}$ mesons with transverse momentum $3&lt;~p_{\rm T}&lt;~16$ GeV/$c$ and rapidity in the nucleon-nucleon centre-of-mass system $|y_{\rm cms}|&lt;~0.5$ (pp collisions) and $-0.96&lt;~y_{\rm cms}&lt;~0.04$ (p-Pb collisions) were correlated to charged particles with $p_{\rm T}&gt;0.3$ Gev/$c$. The properties of the correlation peak induced by the jet containing the D meson, described in terms of the yield of charged particles in the peak and peak width, are compatible within uncertainties between the two collision systems, and described by Monte-Carlo simulations based on the PYTHIA and POWHEG event generators. 
        </description>
    </descriptions>


    <alternateIdentifiers>

        <alternateIdentifier alternateIdentifierType="HEPDataRecord">
            http://www.hepdata.net/record/ins1464839
        </alternateIdentifier>

        <alternateIdentifier alternateIdentifierType="HEPDataRecordAlt">
            http://www.hepdata.net/record/77274
        </alternateIdentifier>

        <alternateIdentifier alternateIdentifierType="ROOTDownload">
            http://www.hepdata.net/download/submission/77274/root
        </alternateIdentifier>

        <alternateIdentifier alternateIdentifierType="YAMLDownload">
            http://www.hepdata.net/download/submission/77274/yaml
        </alternateIdentifier>

        <alternateIdentifier alternateIdentifierType="CSVDownload">
            http://www.hepdata.net/download/submission/77274/csv
        </alternateIdentifier>

        <alternateIdentifier alternateIdentifierType="YODADownload">
            http://www.hepdata.net/download/submission/77274/yoda
        </alternateIdentifier>
    </alternateIdentifiers>

    <relatedIdentifiers>
        
            <relatedIdentifier relatedIdentifierType="URL" relationType="IsSupplementTo">
                http://www.inspirehep.net/record/1464839
            </relatedIdentifier>
        

        

        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t1
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t2
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t3
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t4
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t5
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t6
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t7
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t8
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t9
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t10
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t11
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t12
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t13
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t14
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t15
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t16
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t17
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t18
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t19
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t20
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t21
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t22
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t23
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t24
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t25
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t26
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t27
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t28
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t29
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t30
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t31
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t32
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t33
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t34
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t35
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t36
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t37
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t38
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t39
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t40
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t41
            </relatedIdentifier>
        
    </relatedIdentifiers>
</resource>","minted":"2017-04-13T09:33:58Z","updated":"2017-04-13T09:33:58Z","doi":"10.17182/HEPDATA.77274.V1"}]}}

'
    http_version: 
  recorded_at: Wed, 03 May 2017 06:53:39 GMT
- request:
    method: get
    uri: https://search.datacite.org/api?fl=doi,xml,media,minted,updated&q=doi:10.17182/hepdata.77274.v1&wt=json
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Maremma - https://github.com/datacite/maremma
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Access-Control-Allow-Methods:
      - GET, POST, OPTIONS
      Access-Control-Allow-Origin:
      - "*"
      Content-Type:
      - application/json;charset=UTF-8
      Date:
      - Wed, 03 May 2017 06:53:40 GMT
      Server:
      - openresty/1.11.2.2
      Connection:
      - keep-alive
    body:
      encoding: UTF-8
      string: '{"responseHeader":{"status":0,"QTime":1},"response":{"numFound":1,"start":0,"docs":[{"xml":"<resource xmlns="http://datacite.org/schema/kernel-3" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://datacite.org/schema/kernel-3 http://schema.datacite.org/meta/kernel-3/metadata.xsd">
    <identifier identifierType="DOI">10.17182/hepdata.77274.v1</identifier>
    <creators>
        
            
                <creator>
                    <creatorName>Adam, Jaroslav</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Adamova, Dagmar</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Aggarwal, Madan Mohan</creatorName>
                    <affiliation>Panjab U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Aglieri Rinella, Gianluca</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Agnello, Michelangelo</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Agrawal, Neelima</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ahammed, Zubayer</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ahmad, Shakeel</creatorName>
                    <affiliation>Aligarh Muslim U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ahn, Sang Un</creatorName>
                    <affiliation>KISTI, Daejeon</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Aiola, Salvatore</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Akindinov, Alexander</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alam, Sk Noor</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Silva De Albuquerque, Danilo</creatorName>
                    <affiliation>Campinas State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Aleksandrov, Dmitry</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alessandro, Bruno</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alexandre, Didier</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alfaro Molina, Jose Ruben</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alici, Andrea</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alkin, Anton</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Millan Almaraz, Jesus Roberto</creatorName>
                    <affiliation>Sinaloa U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alme, Johan</creatorName>
                    <affiliation>Bergen Coll. Higher Educ.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alt, Torsten</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Altinpinar, Sedat</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Altsybeev, Igor</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alves Garcia Prado, Caio</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Andrei, Cristian</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Andronic, Anton</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Anguelov, Venelin</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Anticic, Tome</creatorName>
                    <affiliation>Boskovic Inst., Zagreb</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Antinori, Federico</creatorName>
                    <affiliation>INFN, Padua</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Antonioli, Pietro</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Aphecetche, Laurent Bernard</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Appelshaeuser, Harald</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Arcelli, Silvia</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Arnaldi, Roberta</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Arnold, Oliver Werner</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Arsene, Ionut Cristian</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Arslandok, Mesut</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Audurier, Benjamin</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Augustinus, Andre</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Averbeck, Ralf Peter</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Azmi, Mohd Danish</creatorName>
                    <affiliation>Aligarh Muslim U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Badala, Angela</creatorName>
                    <affiliation>INFN, Catania</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Baek, Yong Wook</creatorName>
                    <affiliation>Konkuk U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bagnasco, Stefano</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bailhache, Raphaelle Marie</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bala, Renu</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Balasubramanian, Supraja</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Baldisseri, Alberto</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Baral, Rama Chandra</creatorName>
                    <affiliation>Bhubaneswar, Inst. Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Barbano, Anastasia Maria</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Barbera, Roberto</creatorName>
                    <affiliation>Catania U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Barile, Francesco</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Barnafoldi, Gergely Gabor</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Barnby, Lee Stuart</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ramillien Barret, Valerie</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bartalini, Paolo</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Barth, Klaus</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bartke, Jerzy Gustaw</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bartsch, Esther</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Basile, Maurizio</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bastid, Nicole</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Basu, Sumit</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bathen, Bastian</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Batigne, Guillaume</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Batista Camejo, Arianna</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Batyunya, Boris</creatorName>
                    <affiliation>Dubna, JINR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Batzing, Paul Christoph</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bearden, Ian Gardner</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Beck, Hans</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bedda, Cristina</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Behera, Nirbhay Kumar</creatorName>
                    <affiliation>Inha U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Belikov, Iouri</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bellini, Francesca</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bello Martinez, Hector</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bellwied, Rene</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Belmont Iii, Ronald John</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Belmont Moreno, Ernesto</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Espinoza Beltran, Lucina Gabriela</creatorName>
                    <affiliation>Sinaloa U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Belyaev, Vladimir</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bencedi, Gyula</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Beole, Stefania</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Berceanu, Ionela</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bercuci, Alexandru</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Berdnikov, Yaroslav</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Berenyi, Daniel</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bertens, Redmer Alexander</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Berzano, Dario</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Betev, Latchezar</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bhasin, Anju</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bhat, Inayat Rasool</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bhati, Ashok Kumar</creatorName>
                    <affiliation>Panjab U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bhattacharjee, Buddhadeb</creatorName>
                    <affiliation>Gauhati U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bhom, Jihyun</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bianchi, Livio</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bianchi, Nicola</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bianchin, Chiara</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bielcik, Jaroslav</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bielcikova, Jana</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bilandzic, Ante</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Biro, Gabor</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Biswas, Rathijit</creatorName>
                    <affiliation>Bose Inst., Kolkata</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Biswas, Saikat</creatorName>
                    <affiliation>Bose Inst., Kolkata</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bjelogrlic, Sandro</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Blair, Justin Thomas</creatorName>
                    <affiliation>Texas U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Blau, Dmitry</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Blume, Christoph</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bock, Friederike</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bogdanov, Alexey</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Boggild, Hans</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Boldizsar, Laszlo</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bombara, Marek</creatorName>
                    <affiliation>Kosice U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bonora, Matthias</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Book, Julian Heinz</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Borel, Herve</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Borissov, Alexander</creatorName>
                    <affiliation>Pusan Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Borri, Marcello</creatorName>
                    <affiliation>Liverpool U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bossu, Francesco</creatorName>
                    <affiliation>iThemba LABS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Botta, Elena</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bourjau, Christian</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Braun-Munzinger, Peter</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bregant, Marco</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Breitner, Timo Gunther</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Broker, Theo Alexander</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Browning, Tyler Allen</creatorName>
                    <affiliation>Purdue U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Broz, Michal</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Brucken, Erik Jens</creatorName>
                    <affiliation>Helsinki Inst. of Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bruna, Elena</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bruno, Giuseppe Eugenio</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Budnikov, Dmitry</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Buesching, Henner</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bufalino, Stefania</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Buncic, Predrag</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Busch, Oliver</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Buthelezi, Edith Zinhle</creatorName>
                    <affiliation>iThemba LABS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Bashir Butt, Jamila</creatorName>
                    <affiliation>COMSATS, Islamabad</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Buxton, Jesse Thomas</creatorName>
                    <affiliation>Ohio State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cabala, Jan</creatorName>
                    <affiliation>Kosice Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Caffarri, Davide</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cai, Xu</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Caines, Helen Louise</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Calero Diaz, Liliet</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Caliva, Alberto</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Calvo Villar, Ernesto</creatorName>
                    <affiliation>Lima, Pont. U. Catolica</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Camerini, Paolo</creatorName>
                    <affiliation>Trieste U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Carena, Francesco</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Carena, Wisla</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Carnesecchi, Francesca</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Castillo Castellanos, Javier Ernesto</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Castro, Andrew John</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Casula, Ester Anna Rita</creatorName>
                    <affiliation>Cagliari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ceballos Sanchez, Cesar</creatorName>
                    <affiliation>Havana, CEADEN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cepila, Jan</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cerello, Piergiorgio</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cerkala, Jakub</creatorName>
                    <affiliation>Kosice Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chang, Beomsu</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chapeland, Sylvain</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chartier, Marielle</creatorName>
                    <affiliation>Liverpool U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Charvet, Jean-Luc Fernand</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chattopadhyay, Subhasis</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chattopadhyay, Sukalyan</creatorName>
                    <affiliation>Saha Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chauvin, Alex</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chelnokov, Volodymyr</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cherney, Michael Gerard</creatorName>
                    <affiliation>Creighton U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cheshkov, Cvetan Valeriev</creatorName>
                    <affiliation>Lyon, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cheynis, Brigitte</creatorName>
                    <affiliation>Lyon, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chibante Barroso, Vasco Miguel</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dobrigkeit Chinellato, David</creatorName>
                    <affiliation>Campinas State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cho, Soyeon</creatorName>
                    <affiliation>Inha U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chochula, Peter</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Choi, Kyungeon</creatorName>
                    <affiliation>Pusan Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chojnacki, Marek</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Choudhury, Subikash</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Christakoglou, Panagiotis</creatorName>
                    <affiliation>NIKHEF, Amsterdam</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Christensen, Christian Holm</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Christiansen, Peter</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chujo, Tatsuya</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chung, Suh-Urk</creatorName>
                    <affiliation>Pusan Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cicalo, Corrado</creatorName>
                    <affiliation>INFN, Cagliari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cifarelli, Luisa</creatorName>
                    <affiliation>Enrico Fermi Ctr., Rome</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cindolo, Federico</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cleymans, Jean Willy Andre</creatorName>
                    <affiliation>Cape Town U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Colamaria, Fabio Filippo</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Colella, Domenico</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Collu, Alberto</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Colocci, Manuel</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Conesa Balbastre, Gustavo</creatorName>
                    <affiliation>LPSC, Grenoble</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Conesa Del Valle, Zaida</creatorName>
                    <affiliation>Orsay, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Connors, Megan Elizabeth</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Contreras Nuno, Jesus Guillermo</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cormier, Thomas Michael</creatorName>
                    <affiliation>Oak Ridge</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Corrales Morales, Yasser</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cortes Maldonado, Ismael</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cortese, Pietro</creatorName>
                    <affiliation>Piemonte Orientale U., Alessandria</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cosentino, Mauro Rogerio</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Costa, Filippo</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Crkovska, Jana</creatorName>
                    <affiliation>Orsay, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Crochet, Philippe</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cruz Albino, Rigoberto</creatorName>
                    <affiliation>CINVESTAV, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cuautle Flores, Eleazar</creatorName>
                    <affiliation>Mexico U., ICN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cunqueiro Mendez, Leticia</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dahms, Torsten</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dainese, Andrea</creatorName>
                    <affiliation>INFN, Padua</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Danisch, Meike Charlotte</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Danu, Andrea</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Das, Debasish</creatorName>
                    <affiliation>Saha Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Das, Indranil</creatorName>
                    <affiliation>Saha Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Das, Supriya</creatorName>
                    <affiliation>Bose Inst., Kolkata</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dash, Ajay Kumar</creatorName>
                    <affiliation>Bhubaneswar, NISER</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dash, Sadhana</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De, Sudipan</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Caro, Annalisa</creatorName>
                    <affiliation>Enrico Fermi Ctr., Rome</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Cataldo, Giacinto</creatorName>
                    <affiliation>INFN, Bari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Conti, Camila</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Cuveland, Jan</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Falco, Alessandro</creatorName>
                    <affiliation>Cagliari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Gruttola, Daniele</creatorName>
                    <affiliation>Enrico Fermi Ctr., Rome</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Marco, Nora</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>De Pasquale, Salvatore</creatorName>
                    <affiliation>Salerno U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Derradi De Souza, Rafael</creatorName>
                    <affiliation>Campinas State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Deisting, Alexander</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Deloff, Andrzej</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Denes, Ervin Sandor</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Deplano, Caterina</creatorName>
                    <affiliation>NIKHEF, Amsterdam</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dhankher, Preeti</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Di Bari, Domenico</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Di Mauro, Antonio</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Di Nezza, Pasquale</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Di Ruzza, Benedetto</creatorName>
                    <affiliation>INFN, Padua</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Diaz Corchero, Miguel Angel</creatorName>
                    <affiliation>Madrid, CIEMAT</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dietel, Thomas</creatorName>
                    <affiliation>Cape Town U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dillenseger, Pascal</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Divia, Roberto</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Djuvsland, Oeystein</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dobrin, Alexandru Florin</creatorName>
                    <affiliation>NIKHEF, Amsterdam</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Domenicis Gimenez, Diogenes</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Donigus, Benjamin</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dordic, Olja</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Drozhzhova, Tatiana</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dubey, Anand Kumar</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dubla, Andrea</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ducroux, Laurent</creatorName>
                    <affiliation>Lyon, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Dupieux, Pascal</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ehlers Iii, Raymond James</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Elia, Domenico</creatorName>
                    <affiliation>INFN, Bari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Endress, Eric</creatorName>
                    <affiliation>Lima, Pont. U. Catolica</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Engel, Heiko</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Epple, Eliane</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Erazmus, Barbara Ewa</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Erdemir, Irem</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Erhardt, Filip</creatorName>
                    <affiliation>Zagreb U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Espagnon, Bruno</creatorName>
                    <affiliation>Orsay, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Estienne, Magali Danielle</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Esumi, Shinichi</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Eum, Jongsik</creatorName>
                    <affiliation>Pusan Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Evans, David</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Evdokimov, Sergey</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Eyyubova, Gyulnara</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fabbietti, Laura</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fabris, Daniela</creatorName>
                    <affiliation>INFN, Padua</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Faivre, Julien</creatorName>
                    <affiliation>LPSC, Grenoble</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fantoni, Alessandra</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fasel, Markus</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Feldkamp, Linus</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Feliciello, Alessandro</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Feofilov, Grigorii</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ferencei, Jozef</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fernandez Tellez, Arturo</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gonzalez Ferreiro, Elena</creatorName>
                    <affiliation>Santiago de Compostela U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ferretti, Alessandro</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Festanti, Andrea</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Feuillard, Victor Jose Gaston</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Figiel, Jan</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Araujo Silva Figueredo, Marcel</creatorName>
                    <affiliation>Liverpool U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Filchagin, Sergey</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Finogeev, Dmitry</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fionda, Fiorella</creatorName>
                    <affiliation>Cagliari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fiore, Enrichetta Maria</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fleck, Martin Gabriel</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Floris, Michele</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Foertsch, Siegfried Valentin</creatorName>
                    <affiliation>iThemba LABS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Foka, Panagiota</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fokin, Sergey</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fragiacomo, Enrico</creatorName>
                    <affiliation>INFN, Trieste</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Francescon, Andrea</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Francisco, Audrey</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Frankenfeld, Ulrich Michael</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fronze, Gabriele Gaetano</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fuchs, Ulrich</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Furget, Christophe</creatorName>
                    <affiliation>LPSC, Grenoble</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Furs, Artur</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Fusco Girard, Mario</creatorName>
                    <affiliation>Salerno U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gaardhoeje, Jens Joergen</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gagliardi, Martino</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gago Medina, Alberto Martin</creatorName>
                    <affiliation>Lima, Pont. U. Catolica</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gajdosova, Katarina</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gallio, Mauro</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Duarte Galvan, Carlos</creatorName>
                    <affiliation>Sinaloa U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gangadharan, Dhevan Raja</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ganoti, Paraskevi</creatorName>
                    <affiliation>Athens U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gao, Chaosong</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Garabatos Cuadrado, Jose</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Garcia-Solis, Edmundo Javier</creatorName>
                    <affiliation>Chicago State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gargiulo, Corrado</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gasik, Piotr Jan</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gauger, Erin Frances</creatorName>
                    <affiliation>Texas U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Germain, Marie</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gheata, Mihaela</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ghosh, Premomoy</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ghosh, Sanjay Kumar</creatorName>
                    <affiliation>Bose Inst., Kolkata</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gianotti, Paola</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Giubellino, Paolo</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Giubilato, Piero</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gladysz-Dziadus, Ewa</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Glassel, Peter</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gomez Coral, Diego Mauricio</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gomez Ramirez, Andres</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sanchez Gonzalez, Andres</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gonzalez, Victor</creatorName>
                    <affiliation>Madrid, CIEMAT</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gonzalez Zamora, Pedro</creatorName>
                    <affiliation>Madrid, CIEMAT</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gorbunov, Sergey</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gorlich, Lidia Maria</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gotovac, Sven</creatorName>
                    <affiliation>Split Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grabski, Varlen</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grachov, Oleg Anatolievich</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Graczykowski, Lukasz Kamil</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Graham, Katie Leanne</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grelli, Alessandro</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grigoras, Alina Gabriela</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grigoras, Costin</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grigoryev, Vladislav</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grigoryan, Ara</creatorName>
                    <affiliation>Yerevan Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grigoryan, Smbat</creatorName>
                    <affiliation>Dubna, JINR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grynyov, Borys</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grion, Nevio</creatorName>
                    <affiliation>INFN, Trieste</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gronefeld, Julius Maximilian</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grosse-Oetringhaus, Jan Fiete</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Grosso, Raffaele</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gruber, Lukas</creatorName>
                    <affiliation>Stefan Meyer Inst. Subatomare Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Guber, Fedor</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Guernane, Rachid</creatorName>
                    <affiliation>LPSC, Grenoble</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Guerzoni, Barbara</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gulbrandsen, Kristjan Herlache</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gunji, Taku</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gupta, Anik</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gupta, Ramni</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Haake, Rudiger</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hadjidakis, Cynthia Marie</creatorName>
                    <affiliation>Orsay, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Haiduc, Maria</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hamagaki, Hideki</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hamar, Gergoe</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hamon, Julien Charles</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Harris, John William</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Harton, Austin Vincent</creatorName>
                    <affiliation>Chicago State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hatzifotiadou, Despina</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hayashi, Shinichi</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Heckel, Stefan Thomas</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hellbar, Ernst</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Helstrup, Haavard</creatorName>
                    <affiliation>Bergen Coll. Higher Educ.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Herghelegiu, Andrei Ionut</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Herrera Corral, Gerardo Antonio</creatorName>
                    <affiliation>CINVESTAV, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hess, Benjamin Andreas</creatorName>
                    <affiliation>Tubingen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hetland, Kristin Fanebust</creatorName>
                    <affiliation>Bergen Coll. Higher Educ.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hillemanns, Hartmut</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hippolyte, Boris</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Horak, David</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hosokawa, Ritsuya</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hristov, Peter Zahariev</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hughes, Charles</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Humanic, Thomas</creatorName>
                    <affiliation>Ohio State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hussain, Nur</creatorName>
                    <affiliation>Gauhati U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hussain, Tahir</creatorName>
                    <affiliation>Aligarh Muslim U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hutter, Dirk</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Hwang, Dae Sung</creatorName>
                    <affiliation>Sejong U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ilkaev, Radiy</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Inaba, Motoi</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Incani, Elisa</creatorName>
                    <affiliation>Cagliari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ippolitov, Mikhail</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Irfan, Muhammad</creatorName>
                    <affiliation>Aligarh Muslim U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Isakov, Vladimir</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ivanov, Marian</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ivanov, Vladimir</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Izucheev, Vladimir</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jacak, Barbara</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jacazio, Nicolo</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jacobs, Peter Martin</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jadhav, Manoj Bhanudas</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jadlovska, Slavka</creatorName>
                    <affiliation>Kosice Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jadlovsky, Jan</creatorName>
                    <affiliation>Kosice Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jahnke, Cristiane</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jakubowska, Monika Joanna</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Janik, Malgorzata Anna</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pahula Hewage, Sandun</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jena, Chitrasen</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jena, Satyajit</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jimenez Bustamante, Raul Tonatiuh</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jones, Peter Graham</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Jusko, Anton</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kalinak, Peter</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kalweit, Alexander Philipp</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kang, Ju Hwan</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kaplin, Vladimir</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kar, Somnath</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Karasu Uysal, Ayben</creatorName>
                    <affiliation>Karatay U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Karavichev, Oleg</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Karavicheva, Tatiana</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Karayan, Lilit</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Karpechev, Evgeny</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kebschull, Udo Wolfgang</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Keidel, Ralf</creatorName>
                    <affiliation>Fachhochsch., Worms</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Keijdener, Darius Laurens</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Keil, Markus</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Khan, Mohammed Mohisin</creatorName>
                    <affiliation>Aligarh Muslim U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Khan, Palash</creatorName>
                    <affiliation>Saha Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Khan, Shuaib Ahmad</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Khanzadeev, Alexei</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kharlov, Yury</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kileng, Bjarte</creatorName>
                    <affiliation>Bergen Coll. Higher Educ.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Do Won</creatorName>
                    <affiliation>Gangneung-Wonju Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Dong Jo</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Daehyeok</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Hyeonjoong</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Jinsook</creatorName>
                    <affiliation>Gangneung-Wonju Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Jiyoung</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Minwoo</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Se Yong</creatorName>
                    <affiliation>Sejong U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kim, Taesoo</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kirsch, Stefan</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kisel, Ivan</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kiselev, Sergey</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kisiel, Adam Ryszard</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kiss, Gabor</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Klay, Jennifer Lynn</creatorName>
                    <affiliation>Cal. Poly.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Klein, Carsten</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Klein, Jochen</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Klein-Boesing, Christian</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Klewin, Sebastian</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kluge, Alexander</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Knichel, Michael Linus</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Knospe, Anders Garritt</creatorName>
                    <affiliation>Texas U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kobdaj, Chinorat</creatorName>
                    <affiliation>Suranaree U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kofarago, Monika</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kollegger, Thorsten</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kolozhvari, Anatoly</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kondratev, Valerii</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kondratyeva, Natalia</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kondratyuk, Evgeny</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Konevskikh, Artem</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kopcik, Michal</creatorName>
                    <affiliation>Kosice Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kour, Mandeep</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kouzinopoulos, Charalampos</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kovalenko, Oleksandr</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kovalenko, Vladimir</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kowalski, Marek</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Koyithatta Meethaleveedu, Greeshma</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kralik, Ivan</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kravcakova, Adela</creatorName>
                    <affiliation>Kosice U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Krivda, Marian</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Krizek, Filip</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kryshen, Evgeny</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Krzewicki, Mikolaj</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kubera, Andrew Michael</creatorName>
                    <affiliation>Ohio State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kucera, Vit</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kuhn, Christian Claude</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kuijer, Paulus Gerardus</creatorName>
                    <affiliation>NIKHEF, Amsterdam</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kumar, Ajay</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kumar, Jitendra</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kumar, Lokesh</creatorName>
                    <affiliation>Panjab U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kumar, Shyam</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kurashvili, Podist</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kurepin, Alexander</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kurepin, Alexey</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kuryakin, Alexey</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kweon, Min Jung</creatorName>
                    <affiliation>Inha U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Kwon, Youngil</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>La Pointe, Sarah Louise</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>La Rocca, Paola</creatorName>
                    <affiliation>Catania U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ladron De Guevara, Pedro</creatorName>
                    <affiliation>CINVESTAV, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lagana Fernandes, Caio</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lakomov, Igor</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Langoy, Rune</creatorName>
                    <affiliation>Vestfold U. Coll., Tonsberg</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lapidus, Kirill</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lara Martinez, Camilo Ernesto</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lardeux, Antoine Xavier</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lattuca, Alessandra</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Laudi, Elisa</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lea, Ramona</creatorName>
                    <affiliation>Trieste U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Leardini, Lucia</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lee, Seongjoo</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lehas, Fatiha</creatorName>
                    <affiliation>NIKHEF, Amsterdam</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lehner, Sebastian</creatorName>
                    <affiliation>Stefan Meyer Inst. Subatomare Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lemmon, Roy Crawford</creatorName>
                    <affiliation>Daresbury</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lenti, Vito</creatorName>
                    <affiliation>INFN, Bari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Leogrande, Emilia</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Leon Monzon, Ildefonso</creatorName>
                    <affiliation>Sinaloa U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Leon Vargas, Hermes</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Leoncino, Marco</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Levai, Peter</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Li, Shuang</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Li, Xiaomei</creatorName>
                    <affiliation>Beijing, Inst. Atomic Energy</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lien, Jorgen Andre</creatorName>
                    <affiliation>Vestfold U. Coll., Tonsberg</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lietava, Roman</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lindal, Svein</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lindenstruth, Volker</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lippmann, Christian</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lisa, Michael Annan</creatorName>
                    <affiliation>Ohio State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ljunggren, Hans Martin</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lodato, Davide Francesco</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lonne, Per-Ivar</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Loginov, Vitaly</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Loizides, Constantinos</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lopez, Xavier Bernard</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lopez Torres, Ernesto</creatorName>
                    <affiliation>Havana, CEADEN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lowe, Andrew John</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Luettig, Philipp Johannes</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lunardon, Marcello</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Luparello, Grazia</creatorName>
                    <affiliation>Trieste U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lupi, Matteo</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Lutz, Tyler Harrison</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Maevskaya, Alla</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mager, Magnus</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mahajan, Sanjay</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mahmood, Sohail Musa</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Maire, Antonin</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Majka, Richard Daniel</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Malaev, Mikhail</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Maldonado Cervantes, Ivonne Alicia</creatorName>
                    <affiliation>Mexico U., ICN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Malinina, Liudmila</creatorName>
                    <affiliation>SINP, Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mal&#39;Kevich, Dmitry</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Malzacher, Peter</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mamonov, Alexander</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Manko, Vladislav</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Manso, Franck</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Manzari, Vito</creatorName>
                    <affiliation>INFN, Bari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mao, Yaxian</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Marchisone, Massimiliano</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mares, Jiri</creatorName>
                    <affiliation>Prague, Inst. Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Margagliotti, Giacomo Vito</creatorName>
                    <affiliation>Trieste U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Margotti, Anselmo</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Margutti, Jacopo</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Marin, Ana Maria</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Markert, Christina</creatorName>
                    <affiliation>Texas U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Marquard, Marco</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Martin, Nicole Alice</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Martinengo, Paolo</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Martinez Hernandez, Mario Ivan</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Martinez-Garcia, Gines</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Martinez Pedreira, Miguel</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mas, Alexis Jean-Michel</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Masciocchi, Silvia</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Masera, Massimo</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Masoni, Alberto</creatorName>
                    <affiliation>INFN, Cagliari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mastroserio, Annalisa</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Matyja, Adam Tomasz</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mayer, Christoph</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mazer, Joel Anthony</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mazzoni, Alessandra Maria</creatorName>
                    <affiliation>INFN, Rome</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mcdonald, Daniel</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Meddi, Franco</creatorName>
                    <affiliation>Rome U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Melikyan, Yuri</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Menchaca-Rocha, Arturo Alejandro</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Meninno, Elisa</creatorName>
                    <affiliation>Salerno U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mercado-Perez, Jorge</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Meres, Michal</creatorName>
                    <affiliation>Comenius U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mhlanga, Sibaliso</creatorName>
                    <affiliation>Cape Town U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Miake, Yasuo</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mieskolainen, Matti Mikael</creatorName>
                    <affiliation>Helsinki Inst. of Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mikhaylov, Konstantin</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Milano, Leonardo</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Milosevic, Jovan</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mischke, Andre</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mishra, Aditya Nath</creatorName>
                    <affiliation>Indian Inst. Tech., Indore</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Miskowiec, Dariusz Czeslaw</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mitra, Jubin</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mitu, Ciprian Mihai</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mohammadi, Naghmeh</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mohanty, Bedangadas</creatorName>
                    <affiliation>Bhubaneswar, NISER</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Molnar, Levente</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Montano Zetina, Luis Manuel</creatorName>
                    <affiliation>CINVESTAV, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Montes Prado, Esther</creatorName>
                    <affiliation>Madrid, CIEMAT</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Moreira De Godoy, Denise Aparecida</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Perez Moreno, Luis Alberto</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Moretto, Sandra</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Morreale, Astrid</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Morsch, Andreas</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Muccifora, Valeria</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mudnic, Eugen</creatorName>
                    <affiliation>Split Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Muhlheim, Daniel Michael</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Muhuri, Sanjib</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mukherjee, Maitreyee</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Mulligan, James Declan</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Gameiro Munhoz, Marcelo</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Munning, Konstantin</creatorName>
                    <affiliation>Bonn U., HISKP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Munzer, Robert Helmut</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Murakami, Hikari</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Murray, Sean</creatorName>
                    <affiliation>iThemba LABS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Musa, Luciano</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Musinsky, Jan</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Naik, Bharati</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nair, Rahul</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nandi, Basanta Kumar</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nania, Rosario</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nappi, Eugenio</creatorName>
                    <affiliation>INFN, Bari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Naru, Muhammad Umair</creatorName>
                    <affiliation>COMSATS, Islamabad</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ferreira Natal Da Luz, Pedro Hugo</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nattrass, Christine</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rosado Navarro, Sebastian</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nayak, Kishora</creatorName>
                    <affiliation>Bhubaneswar, NISER</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nayak, Ranjit</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nayak, Tapan Kumar</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nazarenko, Sergey</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nedosekin, Alexander</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Negrao De Oliveira, Renato Aparecido</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nellen, Lukas</creatorName>
                    <affiliation>Mexico U., ICN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ng, Fabian</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nicassio, Maria</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Niculescu, Mihai</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Niedziela, Jeremi</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nielsen, Borge Svane</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nikolaev, Sergey</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nikulin, Sergey</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nikulin, Vladimir</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Noferini, Francesco</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nomokonov, Petr</creatorName>
                    <affiliation>Dubna, JINR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nooren, Gerardus</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Cabanillas Noris, Juan Carlos</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Norman, Jaime</creatorName>
                    <affiliation>Liverpool U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nyanin, Alexander</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Nystrand, Joakim Ingemar</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oeschler, Helmut Oskar</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oh, Saehanseul</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oh, Sun Kun</creatorName>
                    <affiliation>Konkuk U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ohlson, Alice Elisabeth</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Okatan, Ali</creatorName>
                    <affiliation>Karatay U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Okubo, Tsubasa</creatorName>
                    <affiliation>Hiroshima U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oleniacz, Janusz</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oliveira Da Silva, Antonio Carlos</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oliver, Michael Henry</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Onderwaater, Jacobus</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oppedisano, Chiara</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Orava, Risto</creatorName>
                    <affiliation>Helsinki Inst. of Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oravec, Matej</creatorName>
                    <affiliation>Kosice Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ortiz Velasquez, Antonio</creatorName>
                    <affiliation>Mexico U., ICN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oskarsson, Anders Nils Erik</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Otwinowski, Jacek Tomasz</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Oyama, Ken</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ozdemir, Mahmut</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pachmayer, Yvonne Chiara</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pagano, Davide</creatorName>
                    <affiliation>U. Brescia</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pagano, Paola</creatorName>
                    <affiliation>Salerno U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Paic, Guy</creatorName>
                    <affiliation>Mexico U., ICN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pal, Susanta Kumar</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Palni, Prabhakar</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pan, Jinjin</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pandey, Ashutosh Kumar</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Papikyan, Vardanush</creatorName>
                    <affiliation>Yerevan Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pappalardo, Giuseppe</creatorName>
                    <affiliation>INFN, Catania</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pareek, Pooja</creatorName>
                    <affiliation>Indian Inst. Tech., Indore</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Park, Woojin</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Parmar, Sonia</creatorName>
                    <affiliation>Panjab U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Passfeld, Annika</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Paticchio, Vincenzo</creatorName>
                    <affiliation>INFN, Bari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Patra, Rajendra Nath</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Paul, Biswarup</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pei, Hua</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Peitzmann, Thomas</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Peng, Xinye</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pereira Da Costa, Hugo Denis Antonio</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Peresunko, Dmitry Yurevich</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Perez Lezama, Edgar</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Peskov, Vladimir</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pestov, Yury</creatorName>
                    <affiliation>Novosibirsk, IYF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Petracek, Vojtech</creatorName>
                    <affiliation>Prague, Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Petrov, Viacheslav</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Petrovici, Mihai</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Petta, Catia</creatorName>
                    <affiliation>Catania U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Piano, Stefano</creatorName>
                    <affiliation>INFN, Trieste</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pikna, Miroslav</creatorName>
                    <affiliation>Comenius U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pillot, Philippe</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ozelin De Lima Pimentel, Lais</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pinazza, Ombretta</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pinsky, Lawrence</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Piyarathna, Danthasinghe</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ploskon, Mateusz Andrzej</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Planinic, Mirko</creatorName>
                    <affiliation>Zagreb U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pluta, Jan Marian</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pochybova, Sona</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Podesta Lerma, Pedro Luis Manuel</creatorName>
                    <affiliation>Sinaloa U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Poghosyan, Martin</creatorName>
                    <affiliation>Oak Ridge</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Polishchuk, Boris</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Poljak, Nikola</creatorName>
                    <affiliation>Zagreb U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Poonsawat, Wanchaloem</creatorName>
                    <affiliation>Suranaree U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pop, Amalia</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Poppenborg, Hendrik</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Porteboeuf, Sarah Julie</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Porter, R Jefferson</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pospisil, Jan</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Prasad, Sidharth Kumar</creatorName>
                    <affiliation>Bose Inst., Kolkata</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Preghenella, Roberto</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Prino, Francesco</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pruneau, Claude Andre</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pshenichnov, Igor</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Puccio, Maximiliano</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Puddu, Giovanna</creatorName>
                    <affiliation>Cagliari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Pujahari, Prabhat Ranjan</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Punin, Valery</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Putschke, Jorn Henning</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Qvigstad, Henrik</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rachevski, Alexandre</creatorName>
                    <affiliation>INFN, Trieste</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Raha, Sibaji</creatorName>
                    <affiliation>Bose Inst., Kolkata</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rajput, Sonia</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rak, Jan</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rakotozafindrabe, Andry Malala</creatorName>
                    <affiliation>IRFU, Saclay</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ramello, Luciano</creatorName>
                    <affiliation>Piemonte Orientale U., Alessandria</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rami, Fouad</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Raniwala, Rashmi</creatorName>
                    <affiliation>Rajasthan U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Raniwala, Sudhir</creatorName>
                    <affiliation>Rajasthan U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rasanen, Sami Sakari</creatorName>
                    <affiliation>Helsinki Inst. of Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rascanu, Bogdan Theodor</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rathee, Deepika</creatorName>
                    <affiliation>Panjab U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Read, Kenneth Francis</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Redlich, Krzysztof</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Reed, Rosi Jan</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rehman, Attiq Ur</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Reichelt, Patrick Simon</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Reidt, Felix</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ren, Xiaowen</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Renfordt, Rainer Arno Ernst</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Reolon, Anna Rita</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Reshetin, Andrey</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Reygers, Klaus Johannes</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Riabov, Viktor</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ricci, Renato Angelo</creatorName>
                    <affiliation>INFN, Legnaro</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Richert, Tuva Ora Herenui</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Richter, Matthias Rudolph</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Riedler, Petra</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Riegler, Werner</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Riggi, Francesco</creatorName>
                    <affiliation>Catania U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ristea, Catalin-Lucian</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rocco, Elena</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rodriguez Cahuantzi, Mario</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rodriguez Manso, Alis</creatorName>
                    <affiliation>NIKHEF, Amsterdam</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Roeed, Ketil</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rogochaya, Elena</creatorName>
                    <affiliation>Dubna, JINR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rohr, David Michael</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Roehrich, Dieter</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ronchetti, Federico</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ronflette, Lucile</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rosnet, Philippe</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rossi, Andrea</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Roukoutakis, Filimon</creatorName>
                    <affiliation>Athens U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Roy, Ankhi</creatorName>
                    <affiliation>Indian Inst. Tech., Indore</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Roy, Christelle Sophie</creatorName>
                    <affiliation>Strasbourg, IPHC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Roy, Pradip Kumar</creatorName>
                    <affiliation>Saha Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rubio Montero, Antonio Juan</creatorName>
                    <affiliation>Madrid, CIEMAT</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rui, Rinaldo</creatorName>
                    <affiliation>Trieste U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Russo, Riccardo</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ryabinkin, Evgeny</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ryabov, Yury</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Rybicki, Andrzej</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Saarinen, Sampo</creatorName>
                    <affiliation>Helsinki Inst. of Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sadhu, Samrangy</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sadovskiy, Sergey</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Safarik, Karel</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sahlmuller, Baldo</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sahoo, Pragati</creatorName>
                    <affiliation>Indian Inst. Tech., Indore</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sahoo, Raghunath</creatorName>
                    <affiliation>Indian Inst. Tech., Indore</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sahoo, Sarita</creatorName>
                    <affiliation>Bhubaneswar, Inst. Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sahu, Pradip Kumar</creatorName>
                    <affiliation>Bhubaneswar, Inst. Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Saini, Jogender</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sakai, Shingo</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Saleh, Mohammad Ahmad</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Salzwedel, Jai Samuel Nielsen</creatorName>
                    <affiliation>Ohio State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sambyal, Sanjeev Singh</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Samsonov, Vladimir</creatorName>
                    <affiliation>Moscow Phys. Eng. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sandor, Ladislav</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sandoval, Andres</creatorName>
                    <affiliation>Mexico U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sano, Masato</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sarkar, Debojit</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sarkar, Nachiketa</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sarma, Pranjal</creatorName>
                    <affiliation>Gauhati U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Scapparone, Eugenio</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Scarlassara, Fernando</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schiaua, Claudiu Cornel</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schicker, Rainer Martin</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schmidt, Christian Joachim</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schmidt, Hans Rudolf</creatorName>
                    <affiliation>Tubingen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schmidt, Martin</creatorName>
                    <affiliation>Tubingen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schuchmann, Simone</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schukraft, Jurgen</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schutz, Yves Roland</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schwarz, Kilian Eberhard</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Schweda, Kai Oliver</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Scioli, Gilda</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Scomparin, Enrico</creatorName>
                    <affiliation>INFN, Turin</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Scott, Rebecca Michelle</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sefcik, Michal</creatorName>
                    <affiliation>Kosice U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Seger, Janet Elizabeth</creatorName>
                    <affiliation>Creighton U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sekiguchi, Yuko</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sekihata, Daiki</creatorName>
                    <affiliation>Hiroshima U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Selyuzhenkov, Ilya</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Senosi, Kgotlaesele</creatorName>
                    <affiliation>iThemba LABS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Senyukov, Serhiy</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Serradilla Rodriguez, Eulogio</creatorName>
                    <affiliation>Madrid, CIEMAT</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sevcenco, Adrian</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shabanov, Arseniy</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shabetai, Alexandre</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shadura, Oksana</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shahoyan, Ruben</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shangaraev, Artem</creatorName>
                    <affiliation>Serpukhov, IHEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sharma, Ankita</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sharma, Mona</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sharma, Monika</creatorName>
                    <affiliation>Jammu U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sharma, Natasha</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sheikh, Ashik Ikbal</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shigaki, Kenta</creatorName>
                    <affiliation>Hiroshima U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shou, Qiye</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Shtejer Diaz, Katherin</creatorName>
                    <affiliation>Havana, CEADEN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sibiryak, Yury</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Siddhanta, Sabyasachi</creatorName>
                    <affiliation>INFN, Cagliari</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sielewicz, Krzysztof Marek</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Siemiarczuk, Teodor</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Silvermyr, David Olle Rickard</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Silvestre, Catherine Micaela</creatorName>
                    <affiliation>LPSC, Grenoble</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Simatovic, Goran</creatorName>
                    <affiliation>Zagreb U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Simonetti, Giuseppe</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Singaraju, Rama Narayana</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Singh, Ranbir</creatorName>
                    <affiliation>Bhubaneswar, NISER</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Singhal, Vikas</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sarkar - Sinha, Tinku</creatorName>
                    <affiliation>Saha Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sitar, Branislav</creatorName>
                    <affiliation>Comenius U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sitta, Mario</creatorName>
                    <affiliation>Piemonte Orientale U., Alessandria</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Skaali, Bernhard</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Slupecki, Maciej</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Smirnov, Nikolai</creatorName>
                    <affiliation>Yale U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Snellings, Raimond</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Snellman, Tomas Wilhelm</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Song, Jihye</creatorName>
                    <affiliation>Pusan Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Song, Myunggeun</creatorName>
                    <affiliation>Yonsei U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Song, Zixuan</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Soramel, Francesca</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sorensen, Soren Pontoppidan</creatorName>
                    <affiliation>Tennessee U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sozzi, Federica</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Spiriti, Eleuterio</creatorName>
                    <affiliation>Frascati</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sputowska, Iwona Anna</creatorName>
                    <affiliation>Cracow, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Spyropoulou-Stassinaki, Martha</creatorName>
                    <affiliation>Athens U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Stachel, Johanna</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Stan, Ionel</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Stankus, Paul</creatorName>
                    <affiliation>Oak Ridge</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Stenlund, Evert Anders</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Steyn, Gideon Francois</creatorName>
                    <affiliation>iThemba LABS</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Stiller, Johannes Hendrik</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Stocco, Diego</creatorName>
                    <affiliation>SUBATECH, Nantes</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Strmen, Peter</creatorName>
                    <affiliation>Comenius U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Alarcon Do Passo Suaide, Alexandre</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sugitate, Toru</creatorName>
                    <affiliation>Hiroshima U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Suire, Christophe Pierre</creatorName>
                    <affiliation>Orsay, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Suleymanov, Mais Kazim Oglu</creatorName>
                    <affiliation>COMSATS, Islamabad</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Suljic, Miljenko</creatorName>
                    <affiliation>Trieste U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sultanov, Rishat</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sumbera, Michal</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Sumowidagdo, Suharyo</creatorName>
                    <affiliation>Jakarta LIPI, Indonesian Inst. Sci.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Szabo, Alexander</creatorName>
                    <affiliation>Comenius U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Szarka, Imrich</creatorName>
                    <affiliation>Comenius U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Szczepankiewicz, Adam</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Szymanski, Maciej Pawel</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tabassam, Uzma</creatorName>
                    <affiliation>COMSATS, Islamabad</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Takahashi, Jun</creatorName>
                    <affiliation>Campinas State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tambave, Ganesh Jagannath</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tanaka, Naoto</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tarhini, Mohamad</creatorName>
                    <affiliation>Orsay, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tariq, Mohammad</creatorName>
                    <affiliation>Aligarh Muslim U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tarzila, Madalina-Gabriela</creatorName>
                    <affiliation>Bucharest, IFIN-HH</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tauro, Arturo</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tejeda Munoz, Guillermo</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Telesca, Adriana</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Terasaki, Kohei</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Terrevoli, Cristina</creatorName>
                    <affiliation>Padua U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Teyssier, Boris</creatorName>
                    <affiliation>Lyon, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Thaeder, Jochen Mathias</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Thakur, Dhananjaya</creatorName>
                    <affiliation>Indian Inst. Tech., Indore</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Thomas, Deepa</creatorName>
                    <affiliation>Texas U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tieulent, Raphael Noel</creatorName>
                    <affiliation>Lyon, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tikhonov, Anatoly</creatorName>
                    <affiliation>Moscow, INR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Timmins, Anthony Robert</creatorName>
                    <affiliation>Houston U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Toia, Alberica</creatorName>
                    <affiliation>Frankfurt U., Inst. Kernphys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Trogolo, Stefano</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Trombetta, Giuseppe</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Trubnikov, Victor</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Trzaska, Wladyslaw Henryk</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tsuji, Tomoya</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tumkin, Alexandr</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Turrisi, Rosario</creatorName>
                    <affiliation>INFN, Padua</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Tveter, Trine Spedstad</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Ullaland, Kjetil</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Uras, Antonio</creatorName>
                    <affiliation>Lyon, IPN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Usai, Gianluca</creatorName>
                    <affiliation>Cagliari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Utrobicic, Antonija</creatorName>
                    <affiliation>Zagreb U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vala, Martin</creatorName>
                    <affiliation>Kosice, IEF</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Valencia Palomo, Lizardo</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vallero, Sara</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Van Der Maarel, Jasper</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Van Hoorne, Jacobus Willem</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Van Leeuwen, Marco</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vanat, Tomas</creatorName>
                    <affiliation>Rez, Nucl. Phys. Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vande Vyvre, Pierre</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Varga, Dezso</creatorName>
                    <affiliation>Wigner RCP, Budapest</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Diozcora Vargas Trevino, Aurora</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vargyas, Marton</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Varma, Raghava</creatorName>
                    <affiliation>Indian Inst. Tech., Mumbai</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vasileiou, Maria</creatorName>
                    <affiliation>Athens U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vasiliev, Andrey</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vauthier, Astrid</creatorName>
                    <affiliation>LPSC, Grenoble</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vazquez Doce, Oton</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vechernin, Vladimir</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Veen, Annelies Marianne</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Veldhoen, Misha</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Velure, Arild</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vercellin, Ermanno</creatorName>
                    <affiliation>Turin U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vergara Limon, Sergio</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vernet, Renaud</creatorName>
                    <affiliation>CC, Villeurbanne</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Verweij, Marta</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vickovic, Linda</creatorName>
                    <affiliation>Split Tech. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Viinikainen, Jussi Samuli</creatorName>
                    <affiliation>Jyvaskyla U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vilakazi, Zabulon</creatorName>
                    <affiliation>Witwatersrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Villalobos Baillie, Orlando</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Villatoro Tello, Abraham</creatorName>
                    <affiliation>Puebla U., Mexico</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vinogradov, Alexander</creatorName>
                    <affiliation>Kurchatov Inst., Moscow</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vinogradov, Leonid</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Virgili, Tiziano</creatorName>
                    <affiliation>Salerno U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vislavicius, Vytautas</creatorName>
                    <affiliation>Lund U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Viyogi, Yogendra</creatorName>
                    <affiliation>Calcutta, VECC</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vodopyanov, Alexander</creatorName>
                    <affiliation>Dubna, JINR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Volkl, Martin Andreas</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Voloshin, Kirill</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Voloshin, Sergey</creatorName>
                    <affiliation>Wayne State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Volpe, Giacomo</creatorName>
                    <affiliation>Bari U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Von Haller, Barthelemy</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vorobyev, Ivan</creatorName>
                    <affiliation>Tech. U., Munich (main)</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vranic, Danilo</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vrlakova, Janka</creatorName>
                    <affiliation>Kosice U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Vulpescu, Bogdan</creatorName>
                    <affiliation>Clermont-Ferrand U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wagner, Boris</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wagner, Jan</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wang, Hongkai</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wang, Mengliang</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Watanabe, Daisuke</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Watanabe, Yosuke</creatorName>
                    <affiliation>Tokyo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Weber, Michael</creatorName>
                    <affiliation>CERN</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Weber, Steffen Georg</creatorName>
                    <affiliation>Darmstadt, EMMI</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Weiser, Dennis Franz</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wessels, Johannes Peter</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Westerhoff, Uwe</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Whitehead, Andile Mothegi</creatorName>
                    <affiliation>Cape Town U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wiechula, Jens</creatorName>
                    <affiliation>Tubingen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wikne, Jon</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wilk, Grzegorz Andrzej</creatorName>
                    <affiliation>Warsaw, Inst. Nucl. Studies</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Wilkinson, Jeremy John</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Willems, Guido Alexander</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Williams, Crispin</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Windelband, Bernd Stefan</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Winn, Michael Andreas</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yalcin, Serpil</creatorName>
                    <affiliation>Karatay U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yang, Ping</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yano, Satoshi</creatorName>
                    <affiliation>Hiroshima U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yin, Zhongbao</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yokoyama, Hiroki</creatorName>
                    <affiliation>Tsukuba U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yoo, In-Kwon</creatorName>
                    <affiliation>Pusan Natl. U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yoon, Jin Hee</creatorName>
                    <affiliation>Inha U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Yurchenko, Volodymyr</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zaborowska, Anna</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zaccolo, Valentina</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zaman, Ali</creatorName>
                    <affiliation>COMSATS, Islamabad</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zampolli, Chiara</creatorName>
                    <affiliation>INFN, Bologna</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Correia Zanoli, Henrique Jose</creatorName>
                    <affiliation>Sao Paulo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zaporozhets, Sergey</creatorName>
                    <affiliation>Dubna, JINR</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zardoshti, Nima</creatorName>
                    <affiliation>Birmingham U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zarochentsev, Andrey</creatorName>
                    <affiliation>St. Petersburg State U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zavada, Petr</creatorName>
                    <affiliation>Prague, Inst. Phys.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zavyalov, Nikolay</creatorName>
                    <affiliation>RFNC-VNIIEF, Sarov</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zbroszczyk, Hanna Paulina</creatorName>
                    <affiliation>Warsaw U. of Tech.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zgura, Sorin Ion</creatorName>
                    <affiliation>Bucharest, Inst. Space Science</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhalov, Mikhail</creatorName>
                    <affiliation>St. Petersburg, INP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhang, Haitao</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhang, Xiaoming</creatorName>
                    <affiliation>LBL, Berkeley</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhang, Yonghong</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Chunhui, Zhang</creatorName>
                    <affiliation>Utrecht U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhang, Zuman</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhao, Chengxin</creatorName>
                    <affiliation>Oslo U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhigareva, Natalia</creatorName>
                    <affiliation>Moscow, ITEP</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhou, Daicui</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhou, You</creatorName>
                    <affiliation>Bohr Inst.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhou, Zhuo</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhu, Hongsheng</creatorName>
                    <affiliation>Bergen U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zhu, Jianhui</creatorName>
                    <affiliation>Hua-Zhong Normal U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zichichi, Antonino</creatorName>
                    <affiliation>Bologna U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zimmermann, Alice</creatorName>
                    <affiliation>Heidelberg U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zimmermann, Markus Bernhard</creatorName>
                    <affiliation>Munster U.</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zinovjev, Gennady</creatorName>
                    <affiliation>BITP, Kiev</affiliation>
                </creator>
            
                <creator>
                    <creatorName>Zyzak, Maksym</creatorName>
                    <affiliation>Frankfurt U., FIAS</affiliation>
                </creator>
            
        
    </creators>
    <dates>
        <date dateType="Updated">2017-04-07 15:04:22.409791</date>
    </dates>
    <titles>
        <title>Measurement of azimuthal correlations of D mesons and charged particles in pp collisions at $\sqrt{s}=7$ TeV and p-Pb collisions at $\sqrt{s_{\rm NN}}=5.02$ TeV</title>
    </titles>
    <publisher>No Journal Information</publisher>
    <publicationYear>2016</publicationYear>

    <language>eng</language>
    <resourceType resourceTypeGeneral="Collection">Collection</resourceType>
    <version>1</version>
    <descriptions>
        <description descriptionType="Abstract">
            The azimuthal correlations of D mesons and charged particles were measured with the ALICE detector in pp collisions at $\sqrt{s}=7$ TeV and p-Pb collisions at $\sqrt{s_{\rm NN}}=5.02$ TeV at the Large Hadron Collider. D$^0$, D$^+$, and D$^{*+}$ mesons with transverse momentum $3&lt;~p_{\rm T}&lt;~16$ GeV/$c$ and rapidity in the nucleon-nucleon centre-of-mass system $|y_{\rm cms}|&lt;~0.5$ (pp collisions) and $-0.96&lt;~y_{\rm cms}&lt;~0.04$ (p-Pb collisions) were correlated to charged particles with $p_{\rm T}&gt;0.3$ Gev/$c$. The properties of the correlation peak induced by the jet containing the D meson, described in terms of the yield of charged particles in the peak and peak width, are compatible within uncertainties between the two collision systems, and described by Monte-Carlo simulations based on the PYTHIA and POWHEG event generators. 
        </description>
    </descriptions>


    <alternateIdentifiers>

        <alternateIdentifier alternateIdentifierType="HEPDataRecord">
            http://www.hepdata.net/record/ins1464839
        </alternateIdentifier>

        <alternateIdentifier alternateIdentifierType="HEPDataRecordAlt">
            http://www.hepdata.net/record/77274
        </alternateIdentifier>

        <alternateIdentifier alternateIdentifierType="ROOTDownload">
            http://www.hepdata.net/download/submission/77274/root
        </alternateIdentifier>

        <alternateIdentifier alternateIdentifierType="YAMLDownload">
            http://www.hepdata.net/download/submission/77274/yaml
        </alternateIdentifier>

        <alternateIdentifier alternateIdentifierType="CSVDownload">
            http://www.hepdata.net/download/submission/77274/csv
        </alternateIdentifier>

        <alternateIdentifier alternateIdentifierType="YODADownload">
            http://www.hepdata.net/download/submission/77274/yoda
        </alternateIdentifier>
    </alternateIdentifiers>

    <relatedIdentifiers>
        
            <relatedIdentifier relatedIdentifierType="URL" relationType="IsSupplementTo">
                http://www.inspirehep.net/record/1464839
            </relatedIdentifier>
        

        

        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t1
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t2
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t3
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t4
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t5
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t6
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t7
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t8
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t9
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t10
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t11
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t12
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t13
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t14
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t15
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t16
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t17
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t18
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t19
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t20
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t21
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t22
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t23
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t24
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t25
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t26
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t27
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t28
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t29
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t30
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t31
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t32
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t33
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t34
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t35
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t36
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t37
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t38
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t39
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t40
            </relatedIdentifier>
        
            <relatedIdentifier relatedIdentifierType="DOI" relationType="IsSupplementedBy">
                10.17182/hepdata.77274.v1/t41
            </relatedIdentifier>
        
    </relatedIdentifiers>
</resource>","minted":"2017-04-13T09:33:58Z","updated":"2017-04-13T09:33:58Z","doi":"10.17182/HEPDATA.77274.V1"}]}}

'
    http_version: 
  recorded_at: Wed, 03 May 2017 06:53:41 GMT
recorded_with: VCR 3.0.3
