---
http_interactions:
- request:
    method: get
    uri: https://api.datacite.org/prefixes/10.1111
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Maremma - https://github.com/datacite/maremma
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Fri, 29 Dec 2017 12:46:05 GMT
      Content-Type:
      - application/vnd.api+json; charset=utf-8
      Connection:
      - keep-alive
      Status:
      - 200 OK
      X-Anonymous-Consumer:
      - 'true'
      Cache-Control:
      - max-age=0, private, must-revalidate
      Vary:
      - Accept-Encoding
      Etag:
      - W/"d2c510be641d45d932800af9be99a6be"
      X-Runtime:
      - '0.774296'
      X-Request-Id:
      - 767f4c1c-1fb3-45f4-a643-7fb8fd2bda11
      X-Powered-By:
      - Phusion Passenger 5.1.12
      Server:
      - nginx/1.12.2 + Phusion Passenger 5.1.12
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Methods:
      - GET, POST, PATCH, PUT, DELETE, OPTIONS
      Access-Control-Allow-Headers:
      - DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization
      Access-Control-Expose-Headers:
      - DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range,Authorization
    body:
      encoding: UTF-8
      string: '{"data":{"id":"10.1111","type":"prefixes","attributes":{"registration-agency":"Crossref","created":null,"updated":"2016-09-21T20:45:34Z"},"relationships":{"clients":{"data":[]},"providers":{"data":[]}}}}'
    http_version: 
  recorded_at: Fri, 29 Dec 2017 12:46:05 GMT
- request:
    method: get
    uri: http://www.crossref.org/openurl/?format=unixref&id=doi:10.1111/nph.14619&noredirect=true&pid=tech@datacite.org
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Maremma - https://github.com/datacite/maremma
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Crossref-Deployment-Name:
      - cr6-1
      Content-Type:
      - text/xml;charset=UTF-8
      Content-Language:
      - en-US
      Date:
      - Fri, 29 Dec 2017 12:46:05 GMT
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Fri, 29 Dec 2017 12:46:06 GMT
recorded_with: VCR 3.0.3
