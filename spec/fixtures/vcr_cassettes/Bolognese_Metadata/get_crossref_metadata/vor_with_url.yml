---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.1038
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.1; +https://github.com/datacite/maremma)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Mon, 24 Jun 2019 06:30:54 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Content-Length:
      - '54'
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=dfe4365de50bcf876a61ea63dd7d76a7a1561357854; expires=Tue, 23-Jun-20
        06:30:54 GMT; path=/; domain=.doi.org; HttpOnly
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 4ebca7df2e46c2c2-FRA
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.1038",
            "RA": "Crossref"
          }
        ]
    http_version: 
  recorded_at: Mon, 24 Jun 2019 06:30:54 GMT
- request:
    method: get
    uri: http://www.crossref.org/openurl/?format=unixref&id=doi:10.1038/hdy.2013.26&noredirect=true&pid=tech@datacite.org
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.1; +https://github.com/datacite/maremma)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Crossref-Deployment-Name:
      - qs5-1
      Content-Type:
      - text/xml;charset=UTF-8
      Content-Language:
      - en-US
      Date:
      - Mon, 24 Jun 2019 06:30:54 GMT
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 24 Jun 2019 06:30:54 GMT
recorded_with: VCR 3.0.3
