---
http_interactions:
- request:
    method: get
    uri: https://app.datacite.org/prefixes/10.1371
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Maremma - https://github.com/datacite/maremma
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 25 Feb 2018 14:08:44 GMT
      Content-Type:
      - application/vnd.api+json; charset=utf-8
      Connection:
      - keep-alive
      Status:
      - 200 OK
      X-Anonymous-Consumer:
      - 'true'
      Cache-Control:
      - max-age=0, private, must-revalidate
      Vary:
      - Accept-Encoding, Origin
      X-Request-Id:
      - c56f6769-33f4-4346-bdf8-bdc804d09988
      Etag:
      - W/"71ca2c07f54fa8664a86e5df10d75a59"
      X-Runtime:
      - '0.113907'
      X-Powered-By:
      - Phusion Passenger 5.2.0
      Server:
      - nginx/1.12.2 + Phusion Passenger 5.2.0
    body:
      encoding: ASCII-8BIT
      string: '{"data":{"id":"10.1371","type":"prefixes","attributes":{"registration-agency":"Crossref","created":null,"updated":"2016-09-21T20:47:32Z"},"relationships":{"clients":{"data":[]},"providers":{"data":[]}}}}'
    http_version: 
  recorded_at: Sun, 25 Feb 2018 14:08:44 GMT
- request:
    method: get
    uri: http://www.crossref.org/openurl/?format=unixref&id=doi:10.1371/journal.pone.0000030&noredirect=true&pid=tech@datacite.org
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Maremma - https://github.com/datacite/maremma
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Crossref-Deployment-Name:
      - qs5-1
      Content-Type:
      - text/xml;charset=UTF-8
      Content-Language:
      - en-US
      Date:
      - Sun, 25 Feb 2018 14:08:44 GMT
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sun, 25 Feb 2018 14:08:44 GMT
recorded_with: VCR 3.0.3
