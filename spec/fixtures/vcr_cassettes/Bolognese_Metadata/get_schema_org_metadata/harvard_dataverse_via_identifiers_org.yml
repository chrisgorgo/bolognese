---
http_interactions:
- request:
    method: get
    uri: https://identifiers.org/doi/10.7910/DVN/NJ7XSO
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.1.1; +https://github.com/datacite/maremma)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 302
      message: Found
    headers:
      Server:
      - Apache-Coyote/1.1
      Location:
      - http://identifiers.org/doi/10.7910/DVN/NJ7XSO
      Content-Length:
      - '0'
      Date:
      - Mon, 27 Aug 2018 10:08:49 GMT
    body:
      encoding: ASCII-8BIT
      string: ''
    http_version: 
  recorded_at: Mon, 27 Aug 2018 10:08:49 GMT
- request:
    method: get
    uri: http://identifiers.org/doi/10.7910/DVN/NJ7XSO
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.1.1; +https://github.com/datacite/maremma)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 302
      message: Found
    headers:
      Server:
      - Apache-Coyote/1.1
      Location:
      - http://hdl.handle.net/10.7910/DVN/NJ7XSO
      Content-Length:
      - '0'
      Date:
      - Mon, 27 Aug 2018 10:08:49 GMT
    body:
      encoding: ASCII-8BIT
      string: ''
    http_version: 
  recorded_at: Mon, 27 Aug 2018 10:08:49 GMT
- request:
    method: get
    uri: http://hdl.handle.net/10.7910/DVN/NJ7XSO
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.1.1; +https://github.com/datacite/maremma)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 302
      message: Found
    headers:
      Server:
      - Apache-Coyote/1.1
      Vary:
      - Accept
      Location:
      - https://dataverse.harvard.edu/citation?persistentId=doi:10.7910/DVN/NJ7XSO
      Expires:
      - Mon, 27 Aug 2018 10:11:03 GMT
      Content-Type:
      - text/html;charset=utf-8
      Content-Length:
      - '233'
      Date:
      - Mon, 27 Aug 2018 10:08:48 GMT
    body:
      encoding: ASCII-8BIT
      string: |-
        <html><head><title>Handle Redirect</title></head>
        <body><a href="https://dataverse.harvard.edu/citation?persistentId=doi:10.7910/DVN/NJ7XSO">https://dataverse.harvard.edu/citation?persistentId=doi:10.7910/DVN/NJ7XSO</a></body></html>
    http_version: 
  recorded_at: Mon, 27 Aug 2018 10:08:49 GMT
- request:
    method: get
    uri: https://dataverse.harvard.edu/citation?persistentId=doi:10.7910/DVN/NJ7XSO
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.1.1; +https://github.com/datacite/maremma)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 302
      message: Found
    headers:
      Cache-Control:
      - no-cache="set-cookie"
      Content-Language:
      - en-US
      Content-Type:
      - text/html;charset=ISO-8859-1
      Date:
      - Mon, 27 Aug 2018 10:08:50 GMT
      Location:
      - https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/NJ7XSO
      Server:
      - Apache/2.4.6 (Red Hat Enterprise Linux) OpenSSL/1.0.2k-fips
      Set-Cookie:
      - AWSELB=EB1179591E49E298C6825A3028F74991071DEE12D3CF6A1B0A2CD5F2F144400DE0E06A10F0DBD3EC37C4E69D8B958E3FBF8CF81403222DF6AABE0F6509EF79AB1D548B7265;PATH=/;MAX-AGE=28800
      Content-Length:
      - '229'
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: "<html>\r\n<head><title>Document moved</title></head>\r\n<body><h1>Document
        moved</h1>\r\nThis document has moved <a href=\"https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/NJ7XSO\">here</a>.<p>\r\n</body>\r\n</html>\r\n"
    http_version: 
  recorded_at: Mon, 27 Aug 2018 10:08:50 GMT
- request:
    method: get
    uri: https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/NJ7XSO
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.1.1; +https://github.com/datacite/maremma)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=UTF-8
      Date:
      - Mon, 27 Aug 2018 10:08:50 GMT
      Server:
      - Apache/2.4.6 (Red Hat Enterprise Linux) OpenSSL/1.0.2k-fips
      Set-Cookie:
      - JSESSIONID=adb80aab88e3eea89af1e8ef01eb; Path=/; Secure; HttpOnly, AWSELB=EB1179591E49E298C6825A3028F74991071DEE12D3FE010BDBAE7AE7E438B31BFA0246B9F2DBD3EC37C4E69D8B958E3FBF8CF814030B5CB9749AB70FE33A8BB5BB36A149CB;PATH=/;MAX-AGE=28800
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Mon, 27 Aug 2018 10:08:51 GMT
recorded_with: VCR 3.0.3
