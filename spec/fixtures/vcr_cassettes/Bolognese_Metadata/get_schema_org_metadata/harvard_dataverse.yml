---
http_interactions:
- request:
    method: get
    uri: https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/GAOC03
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Maremma 4.0.5 - https://github.com/datacite/maremma
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - no-cache="set-cookie"
      Content-Type:
      - text/html;charset=UTF-8
      Date:
      - Sun, 18 Mar 2018 04:38:25 GMT
      Server:
      - Apache/2.4.6 (Red Hat Enterprise Linux) OpenSSL/1.0.2k-fips
      Set-Cookie:
      - JSESSIONID=766c983c5b26e981ce9871afd1b5; Path=/; Secure; HttpOnly, AWSELB=EB1179591E49E298C6825A3028F74991071DEE12D3CF6A1B0A2CD5F2F144400DE0E06A10F0DBD3EC37C4E69D8B958E3FBF8CF81403222DF6AABE0F6509EF79AB1D548B7265;PATH=/;MAX-AGE=28800
      Connection:
      - keep-alive
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en"><head>
            <title>The National Labor Force : SAKERNAS, 2008 - Numeric Data Services Dataverse</title>
	    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	    <meta name="DC.identifier" content="doi:10.7910/DVN/GAOC03" />
	    <meta name="DC.type" content="Dataset" />
	    <meta name="DC.title" content="The National Labor Force : SAKERNAS, 2008" />
            <meta name="DC.date" content="2018-03-16" />
	    <meta name="DC.publisher" content="Harvard Dataverse" />
            <meta name="DC.description" content="National labor force survey in Indonesia. Survei angkatan kerja nasional. 2008" />
            <meta name="DC.creator" content="Badan Pusat Statistik" />
            <meta name="DC.subject" content="Social Sciences" />
                <script type="application/ld+json">{"@context":"http://schema.org","@type":"Dataset","identifier":"http://dx.doi.org/10.7910/DVN/GAOC03","name":"The National Labor Force : SAKERNAS, 2008","author":[{"name":"Badan Pusat Statistik"}],"datePublished":"2018-03-16","dateModified":"2018-03-16","version":"1","description":"National labor force survey in Indonesia. Survei angkatan kerja nasional. 2008","keywords":["Social Sciences","Labor Supply, Indonesia, Statistics"],"schemaVersion":"https://schema.org/version/3.3","license":{"@type":"Dataset","text":"Licensed electronic resources are restricted to members of the Harvard community for purposes of research, teaching, and private study. Under Harvard's licenses for electronic resources, users generally may not: permit anyone other than authorized users to use the licensed materials; modify or create a derivative work of the licensed materials without the permission of the licensor; remove, obscure or modify any copyright or other notices included in the licensed materials; use the licensed materials for commercial purposes, including but not limited to the sale of the licensed materials. Users are individually responsible for compliance with these terms."},"includedInDataCatalog":{"@type":"DataCatalog","name":"Harvard Dataverse","url":"https://dataverse.harvard.edu"},"provider":{"@type":"Organization","name":"Dataverse"}}

                </script>
            <meta http-equiv="Content-Language" content="en" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <meta http-equiv="X-UA-Compatible" content="IE=edge" />
            <meta name="description" content="The Dataverse Project is an open source software application to share, cite and archive data. Dataverse provides a robust infrastructure for data stewards to host and archive data, while offering researchers an easy way to share and get credit for their data." /><link type="text/css" rel="stylesheet" href="/javax.faces.resource/theme.css.xhtml?ln=primefaces-bootstrap" /><script type="text/javascript" src="/javax.faces.resource/jquery/jquery.js.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?ln=primefaces&amp;v=5.3"></script><script type="text/javascript" src="/javax.faces.resource/jquery/jquery-plugins.js.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?ln=primefaces&amp;v=5.3"></script><script type="text/javascript" src="/javax.faces.resource/primefaces.js.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?ln=primefaces&amp;v=5.3"></script><link type="text/css" rel="stylesheet" href="/javax.faces.resource/primefaces.css.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?ln=primefaces&amp;v=5.3" /><link type="text/css" rel="stylesheet" href="/javax.faces.resource/watermark/watermark.css.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?ln=primefaces&amp;v=5.3" /><script type="text/javascript" src="/javax.faces.resource/watermark/watermark.js.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?ln=primefaces&amp;v=5.3"></script><link type="text/css" rel="stylesheet" href="/javax.faces.resource/fileupload/fileupload.css.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?ln=primefaces&amp;v=5.3" /><script type="text/javascript" src="/javax.faces.resource/fileupload/fileupload.js.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?ln=primefaces&amp;v=5.3"></script><script type="text/javascript">if(window.PrimeFaces){}</script>
        <link type="image/png" rel="icon" href="/javax.faces.resource/images/favicondataverse.png.xhtml" />
        <link type="image/png" rel="image_src" href="/javax.faces.resource/images/dataverseproject.png.xhtml" />
        <link type="text/css" rel="stylesheet" href="/javax.faces.resource/bs/css/bootstrap.min.css.xhtml?version=4.8.4" />
        <link type="text/css" rel="stylesheet" href="/javax.faces.resource/bs/css/bootstrap-theme.min.css.xhtml?version=4.8.4" />
        <link type="text/css" rel="stylesheet" href="/javax.faces.resource/css/ie-compat.css.xhtml?version=4.8.4" />
        <link type="text/css" rel="stylesheet" href="/javax.faces.resource/css/owl.carousel.css.xhtml?version=4.8.4" />
        <link type="text/css" rel="stylesheet" href="/javax.faces.resource/css/fontcustom.css.xhtml?version=4.8.4" />
        <link type="text/css" rel="stylesheet" href="/javax.faces.resource/css/socicon.css.xhtml?version=4.8.4" />
        <link type="text/css" rel="stylesheet" href="/javax.faces.resource/css/structure.css.xhtml?version=4.8.4" />
            <script>
                // Break out of iframe
                if (window !== top) top.location = window.location;
            </script>
            <style>
                /* Custom CSS */
                #navbarFixed div.navbar-header img.navbar-brand.custom-logo {height:50px !important;}
#dataverseDesc span > span > span > h3 {font-weight: 300 !important;}

            </style></head><body>
	<a href="#content" class="sr-only">Skip to main content</a>
    
    <div id="dataverse-header-block">
        <!-- Navbar Panel --><nav role="navigation" id="navbarFixed" class="navbar navbar-default navbar-fixed-top">
            <div class="container">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#topNavBar" aria-pressed="false">
                        <span class="sr-only">Toggle navigation</span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>                       
                    <a href="/"><img src="/logos/navbar/logo.png;jsessionid=766c983c5b26e981ce9871afd1b5" class="navbar-brand custom-logo" />
                    </a>
                </div>
                <div class="collapse navbar-collapse" id="topNavBar">
                    <ul class="nav navbar-nav navbar-right">
                         <li>
                            <a href="#" id="navbar-search-toggle" title="Search all dataverses...">
                                <span class="glyphicon glyphicon-search"></span>
                            </a>
                        </li>
                        <form class="navbar-form navbar-left" role="search" style="display:none;">
                            <div class="form-group">
                                <label class="sr-only" for="navbarsearch">Search</label>
                                <input id="navbarsearch" type="text" class="search-input ui-inputfield ui-inputtext ui-widget ui-state-default ui-corner-all" size="28" value="" placeholder="Search all dataverses..." />            
                            </div>                            
                            <button type="submit" class="btn btn-default" onclick="window.location = '/dataverse/harvard?q=' + document.getElementById('navbarsearch').value;                                     return false;">
                                <span class="glyphicon glyphicon-search"></span> Find
                            </button>
                        </form>
                        <li><a href="https://dataverse.org" target="_blank">
                                About
                            </a>                         
                        </li>

                        <li><a href="http://guides.dataverse.org/en/4.8.4/user" target="_blank">
                                User Guide
                            </a>
                        </li>
<form id="j_idt56" name="j_idt56" method="post" action="/dataset.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?persistentId=doi%3A10.7910%2FDVN%2FGAOC03" class="navbar-form navbar-left navbar-form-link">
<input type="hidden" name="j_idt56" value="j_idt56" />
<a id="j_idt56:j_idt57" href="#" class="ui-commandlink ui-widget" onclick="PrimeFaces.ab({s:&quot;j_idt56:j_idt57&quot;,u:&quot;contactDialog&quot;,onco:function(xhr,status,args){PF('contactForm').show();}});return false;">Support</a><input type="hidden" name="javax.faces.ViewState" id="j_id1:javax.faces.ViewState:0" value="4819980655092063622:4398188165106853993" autocomplete="off" />
</form>
                            <li><a href="/dataverseuser.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?editMode=CREATE&amp;redirectPage=%2Fdataset.xhtml%3FpersistentId%3Ddoi%3A10.7910%2FDVN%2FGAOC03">
                                    Sign Up
                                </a>
                            </li>
                            <li><a href="/loginpage.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?redirectPage=%2Fdataset.xhtml%3FpersistentId%3Ddoi%3A10.7910%2FDVN%2FGAOC03">
                                    Log In
                                </a>
                            </li>
                    </ul>
                </div>
            </div></nav>
        <!-- Header Panel -->
        <!-- FIXME: Rather than hard-coding "FFFFFF", get it from the backend (ThemeWidgetFragment.DEFAULT_BACKGROUND_COLOR). --><div style="background:#F5F5F5;" id="dataverseHeader" class="container bg-muted">
            <!-- FIXME: Rather than hard-coding "FFFFFF", get it from the backend (ThemeWidgetFragment.DEFAULT_LOGO_BACKGROUND_COLOR). --><div style="text-align:LEFT;background:#ffffff;" class="dataverseHeaderLogo">
                <img src="/logos/179/nds.gif" alt="Numeric Data Services Dataverse" /></div>
            <div class="dataverseHeaderBlock"><div class="dataverseHeaderCell dataverseHeaderName">
                    <a href="/dataverse/nds" class="dataverseHeaderDataverseName" style="color:#9a3838;">Numeric Data Services Dataverse</a><span style="color:#888888;"> (Harvard University)</span></div><div class="dataverseHeaderCell dataverseHeaderLink"><a href="http://hcl.harvard.edu/libraries/lamont/collections/numericdata/services.cfm" style="color:#9a3838;" target="_blank">Home Page</a></div>
            </div></div><div id="breadcrumbNavBlock" class="container">
                <div class="breadcrumbBlock">
                            <a id="breadcrumbLnk0" href="/dataverse/harvard">Harvard Dataverse
                            </a>
                </div><span class="breadcrumbCarrot"> &gt; </span>
                <div class="breadcrumbBlock">
                            <a id="breadcrumbLnk1" href="/dataverse/HarvardSubscriptionData">Harvard Subscription Data Dataverse
                            </a>
                </div><span class="breadcrumbCarrot"> &gt; </span>
                <div class="breadcrumbBlock">
                            <a id="breadcrumbLnk2" href="/dataverse/nds">Numeric Data Services Dataverse
                            </a>
                </div><span class="breadcrumbCarrot"> &gt; </span>
                <div class="breadcrumbBlock"><span class="breadcrumbActive">The National Labor Force : SAKERNAS, 2008</span>
                </div></div>

        

        <!-- Message Panel --><div id="messagePanel">
            <div class="container messagePanel">
            </div></div>
    </div>
        <div class="container" id="content">
<form id="datasetForm" name="datasetForm" method="post" action="/dataset.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?persistentId=doi%3A10.7910%2FDVN%2FGAOC03" enctype="application/x-www-form-urlencoded">
<input type="hidden" name="datasetForm" value="datasetForm" />

                    <!-- Header / Button Panel -->
                    <!-- View editMode --><div id="datasetForm:topDatasetBlockFragment"><div id="topDatasetBlock"><div id="actionButtonBlock" class="button-block clearfix">
                            <div class="btn-group pull-right" role="group">
                                <!-- Edit/Publish Button Group -->
                                <!-- Publish/Submit for Review/Return to Author Button Group -->
                                <!-- END: Publish/Submit for Review/Return to Author Button Group -->
                                
                                <!-- Edit Button -->
                                <!-- END: Edit Button -->
                                <!-- END: Edit/Link/Publish Button Group -->
                            </div>
                            
                            <!-- Contact/Share Button Group -->
                            <div class="btn-group pull-right" id="datasetButtonBar" role="group"><a id="datasetForm:j_idt252" href="#" class="ui-commandlink ui-widget text-button bootstrap-button-tooltip" aria-label="Email Dataset Contact" onclick="PrimeFaces.ab({s:&quot;datasetForm:j_idt252&quot;,u:&quot;contactDialog&quot;,onco:function(xhr,status,args){PF('contactForm').show();},fi:&quot;datasetForm:topDatasetBlockFragment&quot;});return false;" title="Email Dataset Contact">
                                    <span class="glyphicon glyphicon-envelope"></span> Contact
                                </a><a id="datasetForm:j_idt254" href="#" class="ui-commandlink ui-widget text-button bootstrap-button-tooltip" aria-label="Share Dataset" onclick="PrimeFaces.ab({s:&quot;datasetForm:j_idt254&quot;,onco:function(xhr,status,args){PF('shareDialog').show();sharrre();;},fi:&quot;datasetForm:topDatasetBlockFragment&quot;});return false;" title="Share Dataset">
                                    <span class="glyphicon glyphicon-share"></span> Share
                                </a>
                            </div><div id="datasetForm:shareDialog" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:shareDialog_title" class="ui-dialog-title">Share Dataset</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                                <p class="help-block"><span class="glyphicon glyphicon-info-sign"></span> Share this dataset on your favorite social media networks.</p>

                                <div id="sharrre-widget" data-url="https://dataverse.harvard.edu/dataset.xhtml?persistentId=doi:10.7910/DVN/GAOC03" data-text="View this dataset."></div>

                                <div class="button-block">
                                    <button type="button" onclick="PF('shareDialog').hide()" class="btn btn-default" value="Close">
                                        Close
                                    </button>
                                </div></div></div><script id="datasetForm:shareDialog_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","shareDialog",{id:"datasetForm:shareDialog",modal:true});});</script>
                            <!-- END: Contact/Share Button Group -->
                            
                            <!-- View Dataset Versions Button -->
                            <!-- 4.2.1: replaced permissionServiceBean.on(DatasetPage.dataset).has('ViewUnpublishedDataset') with DatasetPage.canViewUnpublishedDataset() -->
                            <!-- END: Dataset Versions Button -->

                            <!-- Metrics --><div id="metrics-block" class="col-xs-3">
                                <div id="metrics-label" class="col-xs-4 small text-center">
                                    <span class="glyphicon glyphicon-stats"></span> Metrics
                                </div>
                                <div id="metrics-content" class="col-xs-8 small text-center"><span class="metrics-downloads">0 Downloads</span>
                                </div></div>
                            <!-- END: Metrics --></div>
                        
                        <div id="datasetVersionBlock" class="container-fluid"><div id="title-block" class="row">
                                <div class="col-xs-1 vcenter title-preview-icon-block"><span class="icon-dataset"></span>
                                </div>
                                <div class="col-xs-11 vcenter">
                                    <span id="title">The National Labor Force : SAKERNAS, 2008</span>
                                    <!-- DATASET VERSION NUMBER --><span class="label label-default">Version 1.0</span>
                                </div></div>
                            <!-- CITATION BLOCK -->
    
    <div id="citation-block" class="row">
        <div class="col-xs-12  alert alert-info bg-citation">
            <div class="row ">
                <div id="citation" class="col-xs-7 col-md-8">
                    <span id="citation-select" onclick="if (event.target) { selectText(event.target); } else{ selectText(this); }">Badan Pusat Statistik, 2018, "The National Labor Force : SAKERNAS, 2008", <a href="http://dx.doi.org/10.7910/DVN/GAOC03" target="_blank">doi:10.7910/DVN/GAOC03</a>, Harvard Dataverse, V1
                    </span>
                </div><div id="citation-download" class="col-sm-5 col-md-4 text-right">
                    <div class="dropdown">
                        <button type="button" id="downloadCitation" class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                            <span class="glyphicon glyphicon-list"></span> Cite Dataset <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu pull-right text-left" role="menu">
                            <li>
<script type="text/javascript" src="/javax.faces.resource/jsf.js.xhtml?ln=javax.faces"></script>
<a id="datasetForm:endNoteLink" href="#" onclick="mojarra.jsfcljs(document.getElementById('datasetForm'),{'datasetForm:endNoteLink':'datasetForm:endNoteLink'},'');return false">
                                    EndNote XML
                                </a>
                            </li>
                            <li><a id="datasetForm:risLink" href="#" onclick="mojarra.jsfcljs(document.getElementById('datasetForm'),{'datasetForm:risLink':'datasetForm:risLink'},'');return false">
                                    RIS
                                </a>
                            </li>
                            <li><a id="datasetForm:bibLink" href="#" onclick="mojarra.jsfcljs(document.getElementById('datasetForm'),{'datasetForm:bibLink':'datasetForm:bibLink'},'_blank');return false" target="_blank">
                                    BibTeX
                                </a>
                            </li>
                        </ul>
                    </div>
                    <div id="citation-standards" class="small text-muted text-right"><span class="glyphicon glyphicon-info-sign"></span> Learn about <a href="http://best-practices.dataverse.org/data-citation/" title="Get Recognition: Data Citation  - Dataverse Best Practices" target="_blank">Data Citation Standards</a>.</div></div>
            </div>
        </div>
    </div>
                            <!-- END: CITATION BLOCK -->
                            <!-- BEGIN: DATASET SUMMARY --><div id="dataset-summary-metadata" class="row panel panel-default">
                                <div class="panel-body metadata-panel-body"><div class="form-group">
                                            <label for="metadata_dsDescription" class="col-sm-3 control-label">
                                                <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="A summary describing the purpose, nature, and scope of the Dataset.">
                                                        Description
                                                </span>
                                            </label>
                                            <!-- Primitive datasetFields -->
                                            <!-- Compound datasetFields --><div class="col-sm-9">
                                                    <div>National labor force survey in Indonesia. Survei angkatan kerja nasional. 2008
                                                    </div></div></div><div class="form-group">
                                            <label for="metadata_subject" class="col-sm-3 control-label">
                                                <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="Domain-specific Subject Categories that are topically relevant to the Dataset.">
                                                        Subject
                                                </span>
                                            </label>
                                            <!-- Primitive datasetFields --><div class="col-sm-9">Social Sciences</div>
                                            <!-- Compound datasetFields --></div><div id="keywords" class="form-group">
                                            <label class="col-sm-3 control-label">
                                                <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="Key terms that describe important aspects of the Dataset.">Keyword</span>
                                            </label>
                                            <div class="col-sm-9">Labor Supply, Indonesia, Statistics</div></div>
                                </div></div>
                            <!-- END: DATASET SUMMARY -->
                        </div></div></div>
                    <!-- END View editMode -->

                    <!-- Create/Edit editMode -->
                    <!-- END Create/Edit editMode -->

                    <!-- Edit editMode -->
                    <!-- END Header / Button Panel -->
                    <!-- View/Tabs infoMode -->
                    <!-- Tabs --><div id="contentTabs"><div id="datasetForm:pageRefreshFragment"> <!-- rendered="_{empty DatasetPage.editMode}" --><input id="datasetForm:datasetLockedForIngestVariable" type="hidden" name="datasetForm:datasetLockedForIngestVariable" value="false" /><input id="datasetForm:datasetStateChangedVariable" type="hidden" name="datasetForm:datasetStateChangedVariable" value="false" /><script type="text/javascript">refreshIngestLockCommand = function() {PrimeFaces.ab({s:"datasetForm:j_idt488",f:"datasetForm",p:"datasetForm:j_idt488",u:"datasetForm:pageRefreshFragment",pa:arguments[0],fi:"datasetForm:pageRefreshFragment"});}</script><script type="text/javascript">refreshAllCommand = function() {PrimeFaces.ab({s:"datasetForm:j_idt489",f:"datasetForm",p:"datasetForm:j_idt489",u:"datasetForm:topDatasetBlockFragment datasetForm:tabView:filesTable messagePanel",pa:arguments[0],fi:"datasetForm:pageRefreshFragment"});}</script>

                            <!-- see the comment in the javascript below that explains what this button is for --><button id="datasetForm:refreshButton" name="datasetForm:refreshButton" class="" onclick="PrimeFaces.ab({s:&quot;datasetForm:refreshButton&quot;,p:&quot;datasetForm:refreshButton&quot;,u:&quot;datasetForm:topDatasetBlockFragment datasetForm:tabView:filesTable messagePanel&quot;,fi:&quot;datasetForm:pageRefreshFragment&quot;});return false;" style="display:none" type="submit"><span class="ui-button-text ui-c">ui-button</span></button><script id="datasetForm:refreshButton_s" type="text/javascript">PrimeFaces.cw("CommandButton","refreshButton",{id:"datasetForm:refreshButton"});</script>

                            <script type="text/javascript">
                                $(this).ready(function () {
                                    refreshIfStillLocked();
                                });

                                function refreshIfStillLocked() {
                                    if ($('input[id$="datasetLockedForIngestVariable"]').val() === 'true') {
                                        // if dataset is locked, instruct the page to
                                        // wait and check again:
                                        waitAndCheckLockAgain();
                                    } else {
                                        // if not locked, has it just been unlocked?
                                        if ($('input[id$="datasetStateChangedVariable"]').val() === 'true') {
                                            // For whatever unknown PrimeFaces reason
                                            // the page needs to be refreshed twice, for all
                                            // the pull down menus to update properly:
                                            refreshAllCommand();
                                            // You can't just run 2 refreshAllCommand()s in a row
                                            // either; because the command has an "update=@all" on it,
                                            // so I guess if you try to execute the 2nd one right after
                                            // the first one, this fragment is still going to be loading -
                                            // so there would not yet be a command to run! (it needs to
                                            // be rendered, before you can execute it, that is)
                                            setTimeout(function () {
                                                // this button doesn't do anything, but it has an update="@all"
                                                // attribute:
                                                $('button[id$="refreshButton"]').trigger('click');
                                                //refreshAllCommand();
                                            }, 1500);
                                        }
                                    }
                                }

                                function waitAndCheckLockAgain() {
                                    setTimeout(function () {
                                        // refresh the lock in the
                                        // backing bean; i.e., check, if the ingest has
                                        // already completed in the background:
                                        //$('button[id$="refreshButton"]').trigger('click');
                                        //refreshLockCommand();
                                        refreshIngestLockCommand();
                                    }, 10000);
                                }
                            </script></div><div id="datasetForm:tabView" class="ui-tabs ui-widget ui-widget-content ui-corner-all ui-hidden-container ui-tabs-top" data-widget="content"><ul class="ui-tabs-nav ui-helper-reset ui-helper-clearfix ui-widget-header ui-corner-all" role="tablist"><li class="ui-state-default ui-tabs-selected ui-state-active ui-corner-top" role="tab" aria-expanded="true" aria-selected="true"><a href="#datasetForm:tabView:dataFilesTab" tabindex="-1">Files</a></li><li class="ui-state-default ui-corner-top" role="tab" aria-expanded="false" aria-selected="false"><a href="#datasetForm:tabView:metadataMapTab" tabindex="-1">Metadata</a></li><li class="ui-state-default ui-corner-top" role="tab" aria-expanded="false" aria-selected="false"><a href="#datasetForm:tabView:termsTab" tabindex="-1">Terms</a></li><li class="ui-state-default ui-corner-top" role="tab" aria-expanded="false" aria-selected="false"><a href="#datasetForm:tabView:versionsTab" tabindex="-1">Versions</a></li></ul><div class="ui-tabs-panels"><div id="datasetForm:tabView:dataFilesTab" class="ui-tabs-panel ui-widget-content ui-corner-bottom" role="tabpanel" aria-hidden="false">

    <!-- Files Table --><div id="datasetForm:tabView:filesTable" class="ui-datatable ui-widget ui-datatable-scrollable" style="margin-right:1px;"><div class="ui-datatable-header ui-widget-header ui-corner-top"><div id="datasetForm:tabView:filesTable:filesHeaderBlock" class="row">
                <div class="col-xs-6">
                    <!-- dataset file search -->
                    <div class="input-group"><input id="datasetForm:tabView:filesTable:searchFiles" name="datasetForm:tabView:filesTable:searchFiles" type="text" onkeypress="if (event.keyCode == 13) { submitsearch(); return false; }" class="ui-inputfield ui-inputtext ui-widget ui-state-default ui-corner-all form-control" /><script id="datasetForm:tabView:filesTable:searchFiles_s" type="text/javascript">PrimeFaces.cw("InputText","inputSearchTerm",{id:"datasetForm:tabView:filesTable:searchFiles"});</script><script id="datasetForm:tabView:filesTable:j_idt694_s" type="text/javascript">$(function(){PrimeFaces.cw("Watermark","widget_datasetForm_tabView_filesTable_j_idt694",{id:"datasetForm:tabView:filesTable:j_idt694",value:"Search this dataset...",target:"datasetForm:tabView:filesTable:searchFiles"},"watermark");});</script><input id="datasetForm:tabView:filesTable:showAccessPopup" type="hidden" name="datasetForm:tabView:filesTable:showAccessPopup" value="false" /><script type="text/javascript">submitsearch = function() {PrimeFaces.ab({s:"datasetForm:tabView:filesTable:j_idt695",f:"datasetForm",p:"datasetForm:tabView:filesTable:j_idt695 @widgetVar(inputSearchTerm)",u:"datasetForm",ps:true,pa:arguments[0]});}</script>
                        
                        <span class="input-group-btn"><a id="datasetForm:tabView:filesTable:j_idt697" href="#" class="ui-commandlink ui-widget btn btn-default" onclick="PrimeFaces.ab({s:&quot;datasetForm:tabView:filesTable:j_idt697&quot;,p:&quot;datasetForm:tabView:filesTable:j_idt697 @widgetVar(inputSearchTerm)&quot;,u:&quot;datasetForm&quot;,ps:true});return false;">
                                <span class="glyphicon glyphicon-search"></span> Find
                            </a>
                        </span>
                    </div>
                </div></div>
            <div class="row" style="margin-bottom:6px;">
                <div id="filesHeaderCount" class="col-xs-2 text-left">
                    <!-- Files Count --><span class="highlightBold">5 Files</span>
                </div>
                <div id="filesButtons" class="col-xs-10">
                    <!-- 4.2.1: replaced permissionsWrapper.canIssueUpdateDatasetCommand(DatasetPage.dataset) with DatasetPage.canUpdateDataset() --><div id="datasetForm:tabView:filesTable:uploadComputeBlock" class="button-block tab-header pull-right text-right">
<!--                        &lt;h:outputLink value="" type="button" class="btn btn-default" target="_blank" rendered="false"&gt;
                             COMPUTE BUTTON 
                            &lt;span class="glyphicon glyphicon-flash"/&gt; Compute
                        &lt;/h:outputLink&gt;-->
                        
                            <!-- Compute Button *Dataset pg only*: -->
                            <!--***When it is possible to compute on an entire dataset, comment this in-->
<!--                    &lt;h:outputLink value="" type="button" class="btn btn-default" target="_blank" rendered="false"&gt; 
                            &lt;span class="glyphicon glyphicon-flash"/&gt; Compute
                        &lt;/h:outputLink&gt;--></div>
                </div>
            </div></div><div class="ui-widget-header ui-datatable-scrollable-header"><div class="ui-datatable-scrollable-header-box"><table role="grid"><thead id="datasetForm:tabView:filesTable_head"><tr role="row"><th id="datasetForm:tabView:filesTable:j_idt741" class="ui-state-default ui-selection-column text-center" role="columnheader" style="width:20px !important;"><span class="ui-column-title"></span><div class="ui-chkbox ui-chkbox-all ui-widget"><div class="ui-helper-hidden-accessible"><input type="checkbox" name="datasetForm:tabView:filesTable_checkbox" /></div><div class="ui-chkbox-box ui-widget ui-corner-all ui-state-default"><span class="ui-chkbox-icon ui-icon ui-icon-blank ui-c"></span></div></div></th><th id="datasetForm:tabView:filesTable:j_idt742" class="ui-state-default col-file-thumb" role="columnheader" style="width:64px !important;"><span class="ui-column-title"></span></th><th id="datasetForm:tabView:filesTable:j_idt757" class="ui-state-default col-file-metadata" role="columnheader"><span class="ui-column-title"></span></th><th id="datasetForm:tabView:filesTable:j_idt790" class="ui-state-default col-file-action text-right " role="columnheader"><span class="ui-column-title">
                <!-- EDIT -->
                
                <!-- DOWNLOAD --></span></th></tr></thead></table></div></div><div class="ui-datatable-scrollable-body" tabindex="-1"><table role="grid"><tbody id="datasetForm:tabView:filesTable_data" class="ui-datatable-data ui-widget-content"><tr data-ri="0" data-rk="s3://dvn-cloud:1620b9d2cdc-2da259826fe8" class="ui-widget-content ui-datatable-even ui-datatable-selectable" role="row" aria-selected="false"><td role="gridcell" style="width:20px !important;" class="ui-selection-column text-center"><div class="ui-chkbox ui-widget"><div class="ui-helper-hidden-accessible"><input type="checkbox" name="datasetForm:tabView:filesTable_checkbox" /></div><div class="ui-chkbox-box ui-widget ui-corner-all ui-state-default"><span class="ui-chkbox-icon ui-icon ui-icon-blank ui-c"></span></div></div></td><td role="gridcell" style="width:64px !important;" class="col-file-thumb">
            <div class="thumbnail-block text-center">
                <!-- Thumbnail Preview -->

                <!-- Default Icon --><span class="icon-document file-thumbnail-icon text-muted"></span>

                <!-- the "temp preview" is for new, not yet saved files; these should never appear on this page - as we now have the editfilespage for that, correct? -->

                <!-- Restricted File Icon --><div class="file-icon-restricted-block">                  
                    <span class="glyphicon glyphicon-lock text-danger"></span></div>
            </div></td><td role="gridcell" class="col-file-metadata">
                <!-- rendered="# {!(fileMetadata.datasetVersion.released or fileMetadata.datasetVersion.deaccessioned)}" --><a id="datasetForm:tabView:filesTable:0:fileNameLink" name="datasetForm:tabView:filesTable:0:fileNameLink" href="/file.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?fileId=3131854&amp;version=RELEASED&amp;version=.0">Kuesioner Sakernas 2008.pdf</a>

            <!-- TYPE + SIZE + DATE + CHECKSUM -->
            <div class="text-muted small">
                <!-- id:3131854 --><span id="datasetForm:tabView:filesTable:0:fileTypeOutputRegular">Adobe PDF</span><span id="datasetForm:tabView:filesTable:0:fileSize"> - 373.6 KB</span><span id="datasetForm:tabView:filesTable:0:fileCreatePublishDate"> - Mar 16, 2018</span><span id="datasetForm:tabView:filesTable:0:fileDownloadCount"> - 0 Downloads</span><div class="checksum-block"><span id="datasetForm:tabView:filesTable:0:file-checksum">MD5: c7689f047ecd85a207c1ab7a13ee32d5</span></div>
            </div>
            <!-- UNF + Variables, Obsersvations --></td><td role="gridcell" class="col-file-action text-right "><div class="btn-group">
    
    <!-- Compute Button *File pg only*: -->
    <!-- Compute Button *Dataset pg only*: --></div></td></tr><tr data-ri="1" data-rk="s3://dvn-cloud:1620b9cbb3d-661fd5e20ce2" class="ui-widget-content ui-datatable-odd ui-datatable-selectable" role="row" aria-selected="false"><td role="gridcell" style="width:20px !important;" class="ui-selection-column text-center"><div class="ui-chkbox ui-widget"><div class="ui-helper-hidden-accessible"><input type="checkbox" name="datasetForm:tabView:filesTable_checkbox" /></div><div class="ui-chkbox-box ui-widget ui-corner-all ui-state-default"><span class="ui-chkbox-icon ui-icon ui-icon-blank ui-c"></span></div></div></td><td role="gridcell" style="width:64px !important;" class="col-file-thumb">
            <div class="thumbnail-block text-center">
                <!-- Thumbnail Preview -->

                <!-- Default Icon --><span class="icon-document file-thumbnail-icon text-muted"></span>

                <!-- the "temp preview" is for new, not yet saved files; these should never appear on this page - as we now have the editfilespage for that, correct? -->

                <!-- Restricted File Icon --><div class="file-icon-restricted-block">                  
                    <span class="glyphicon glyphicon-lock text-danger"></span></div>
            </div></td><td role="gridcell" class="col-file-metadata">
                <!-- rendered="# {!(fileMetadata.datasetVersion.released or fileMetadata.datasetVersion.deaccessioned)}" --><a id="datasetForm:tabView:filesTable:1:fileNameLink" name="datasetForm:tabView:filesTable:1:fileNameLink" href="/file.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?fileId=3131855&amp;version=RELEASED&amp;version=.0">Layout Sakernas 2008 Agustus.doc</a>

            <!-- TYPE + SIZE + DATE + CHECKSUM -->
            <div class="text-muted small">
                <!-- id:3131855 --><span id="datasetForm:tabView:filesTable:1:fileTypeOutputRegular">MS Word</span><span id="datasetForm:tabView:filesTable:1:fileSize"> - 148.5 KB</span><span id="datasetForm:tabView:filesTable:1:fileCreatePublishDate"> - Mar 16, 2018</span><span id="datasetForm:tabView:filesTable:1:fileDownloadCount"> - 0 Downloads</span><div class="checksum-block"><span id="datasetForm:tabView:filesTable:1:file-checksum">MD5: d9005805969273e94a64c1328a5865f2</span></div>
            </div>
            <!-- UNF + Variables, Obsersvations --></td><td role="gridcell" class="col-file-action text-right "><div class="btn-group">
    
    <!-- Compute Button *File pg only*: -->
    <!-- Compute Button *Dataset pg only*: --></div></td></tr><tr data-ri="2" data-rk="s3://dvn-cloud:1620b9cbd0a-bac585ac04c6" class="ui-widget-content ui-datatable-even ui-datatable-selectable" role="row" aria-selected="false"><td role="gridcell" style="width:20px !important;" class="ui-selection-column text-center"><div class="ui-chkbox ui-widget"><div class="ui-helper-hidden-accessible"><input type="checkbox" name="datasetForm:tabView:filesTable_checkbox" /></div><div class="ui-chkbox-box ui-widget ui-corner-all ui-state-default"><span class="ui-chkbox-icon ui-icon ui-icon-blank ui-c"></span></div></div></td><td role="gridcell" style="width:64px !important;" class="col-file-thumb">
            <div class="thumbnail-block text-center">
                <!-- Thumbnail Preview -->

                <!-- Default Icon --><span class="icon-document file-thumbnail-icon text-muted"></span>

                <!-- the "temp preview" is for new, not yet saved files; these should never appear on this page - as we now have the editfilespage for that, correct? -->

                <!-- Restricted File Icon --><div class="file-icon-restricted-block">                  
                    <span class="glyphicon glyphicon-lock text-danger"></span></div>
            </div></td><td role="gridcell" class="col-file-metadata">
                <!-- rendered="# {!(fileMetadata.datasetVersion.released or fileMetadata.datasetVersion.deaccessioned)}" --><a id="datasetForm:tabView:filesTable:2:fileNameLink" name="datasetForm:tabView:filesTable:2:fileNameLink" href="/file.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?fileId=3131856&amp;version=RELEASED&amp;version=.0">Q_SAK0808.pdf</a>

            <!-- TYPE + SIZE + DATE + CHECKSUM -->
            <div class="text-muted small">
                <!-- id:3131856 --><span id="datasetForm:tabView:filesTable:2:fileTypeOutputRegular">Adobe PDF</span><span id="datasetForm:tabView:filesTable:2:fileSize"> - 143.0 KB</span><span id="datasetForm:tabView:filesTable:2:fileCreatePublishDate"> - Mar 16, 2018</span><span id="datasetForm:tabView:filesTable:2:fileDownloadCount"> - 0 Downloads</span><div class="checksum-block"><span id="datasetForm:tabView:filesTable:2:file-checksum">MD5: 2cd98f74524773238dbdbff0e3260078</span></div>
            </div>
            <!-- UNF + Variables, Obsersvations --></td><td role="gridcell" class="col-file-action text-right "><div class="btn-group">
    
    <!-- Compute Button *File pg only*: -->
    <!-- Compute Button *Dataset pg only*: --></div></td></tr><tr data-ri="3" data-rk="s3://dvn-cloud:1620b9d19e3-946fdbebead1" class="ui-widget-content ui-datatable-odd ui-datatable-selectable" role="row" aria-selected="false"><td role="gridcell" style="width:20px !important;" class="ui-selection-column text-center"><div class="ui-chkbox ui-widget"><div class="ui-helper-hidden-accessible"><input type="checkbox" name="datasetForm:tabView:filesTable_checkbox" /></div><div class="ui-chkbox-box ui-widget ui-corner-all ui-state-default"><span class="ui-chkbox-icon ui-icon ui-icon-blank ui-c"></span></div></div></td><td role="gridcell" style="width:64px !important;" class="col-file-thumb">
            <div class="thumbnail-block text-center">
                <!-- Thumbnail Preview -->

                <!-- Default Icon --><span class="icon-other file-thumbnail-icon text-muted"></span>

                <!-- the "temp preview" is for new, not yet saved files; these should never appear on this page - as we now have the editfilespage for that, correct? -->

                <!-- Restricted File Icon --><div class="file-icon-restricted-block">                  
                    <span class="glyphicon glyphicon-lock text-danger"></span></div>
            </div></td><td role="gridcell" class="col-file-metadata">
                <!-- rendered="# {!(fileMetadata.datasetVersion.released or fileMetadata.datasetVersion.deaccessioned)}" --><a id="datasetForm:tabView:filesTable:3:fileNameLink" name="datasetForm:tabView:filesTable:3:fileNameLink" href="/file.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?fileId=3131857&amp;version=RELEASED&amp;version=.0">sak08agt_transferulang.dbf</a>

            <!-- TYPE + SIZE + DATE + CHECKSUM -->
            <div class="text-muted small">
                <!-- id:3131857 --><span id="datasetForm:tabView:filesTable:3:fileTypeOutputRegular">Unknown</span><span id="datasetForm:tabView:filesTable:3:fileSize"> - 323.5 MB</span><span id="datasetForm:tabView:filesTable:3:fileCreatePublishDate"> - Mar 16, 2018</span><span id="datasetForm:tabView:filesTable:3:fileDownloadCount"> - 0 Downloads</span><div class="checksum-block"><span id="datasetForm:tabView:filesTable:3:file-checksum">MD5: ba6a5f63e10dee46a0025f12f75a4a0f</span></div>
            </div>
            <!-- UNF + Variables, Obsersvations --></td><td role="gridcell" class="col-file-action text-right "><div class="btn-group">
    
    <!-- Compute Button *File pg only*: -->
    <!-- Compute Button *Dataset pg only*: --></div></td></tr><tr data-ri="4" data-rk="s3://dvn-cloud:1620b9d5c0d-e91892b4980a" class="ui-widget-content ui-datatable-even ui-datatable-selectable" role="row" aria-selected="false"><td role="gridcell" style="width:20px !important;" class="ui-selection-column text-center"><div class="ui-chkbox ui-widget"><div class="ui-helper-hidden-accessible"><input type="checkbox" name="datasetForm:tabView:filesTable_checkbox" /></div><div class="ui-chkbox-box ui-widget ui-corner-all ui-state-default"><span class="ui-chkbox-icon ui-icon ui-icon-blank ui-c"></span></div></div></td><td role="gridcell" style="width:64px !important;" class="col-file-thumb">
            <div class="thumbnail-block text-center">
                <!-- Thumbnail Preview -->

                <!-- Default Icon --><span class="icon-other file-thumbnail-icon text-muted"></span>

                <!-- the "temp preview" is for new, not yet saved files; these should never appear on this page - as we now have the editfilespage for that, correct? -->

                <!-- Restricted File Icon --><div class="file-icon-restricted-block">                  
                    <span class="glyphicon glyphicon-lock text-danger"></span></div>
            </div></td><td role="gridcell" class="col-file-metadata">
                <!-- rendered="# {!(fileMetadata.datasetVersion.released or fileMetadata.datasetVersion.deaccessioned)}" --><a id="datasetForm:tabView:filesTable:4:fileNameLink" name="datasetForm:tabView:filesTable:4:fileNameLink" href="/file.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?fileId=3131858&amp;version=RELEASED&amp;version=.0">sak08feb.dbf</a>

            <!-- TYPE + SIZE + DATE + CHECKSUM -->
            <div class="text-muted small">
                <!-- id:3131858 --><span id="datasetForm:tabView:filesTable:4:fileTypeOutputRegular">Unknown</span><span id="datasetForm:tabView:filesTable:4:fileSize"> - 33.2 MB</span><span id="datasetForm:tabView:filesTable:4:fileCreatePublishDate"> - Mar 16, 2018</span><span id="datasetForm:tabView:filesTable:4:fileDownloadCount"> - 0 Downloads</span><div class="checksum-block"><span id="datasetForm:tabView:filesTable:4:file-checksum">MD5: 38ee5b3c1001f4e61ef52b83b567e831</span></div>
            </div>
            <!-- UNF + Variables, Obsersvations --></td><td role="gridcell" class="col-file-action text-right "><div class="btn-group">
    
    <!-- Compute Button *File pg only*: -->
    <!-- Compute Button *Dataset pg only*: --></div></td></tr></tbody></table></div><div class="ui-widget-header ui-datatable-scrollable-footer"><div class="ui-datatable-scrollable-footer-box"><table role="grid"></table></div></div><input type="hidden" id="datasetForm:tabView:filesTable_selection" name="datasetForm:tabView:filesTable_selection" autocomplete="off" value="" /><input type="hidden" id="datasetForm:tabView:filesTable_scrollState" name="datasetForm:tabView:filesTable_scrollState" autocomplete="off" value="0,0" /></div><script id="datasetForm:tabView:filesTable_s" type="text/javascript">$(function(){PrimeFaces.cw("DataTable","filesTable",{id:"datasetForm:tabView:filesTable",selectionMode:"checkbox",scrollable:true,liveScroll:true,scrollStep:25,scrollLimit:5,scrollWidth:"100%",scrollHeight:"92%",liveScrollBuffer:0});});</script></div><div id="datasetForm:tabView:metadataMapTab" class="ui-tabs-panel ui-widget-content ui-corner-bottom ui-helper-hidden" role="tabpanel" aria-hidden="true"><div class="button-block tab-header margin-bottom text-right"><div class="btn-group">
                                        <button class="btn btn-default dropdown-toggle" type="button" styleClass="btn btn-default" data-toggle="dropdown">
                                            <span class="glyphicon glyphicon-export"></span> Export Metadata <span class="caret"></span></button>
                                        <ul class="dropdown-menu" role="menu">
                                                <li><a href="https://dataverse.harvard.edu/api/datasets/export;jsessionid=766c983c5b26e981ce9871afd1b5?exporter=dcterms&amp;persistentId=doi%3A10.7910/DVN/GAOC03" target="_blank">Dublin Core</a>
                                                </li>
                                                <li><a href="https://dataverse.harvard.edu/api/datasets/export;jsessionid=766c983c5b26e981ce9871afd1b5?exporter=ddi&amp;persistentId=doi%3A10.7910/DVN/GAOC03" target="_blank">DDI</a>
                                                </li>
                                                <li><a href="https://dataverse.harvard.edu/api/datasets/export;jsessionid=766c983c5b26e981ce9871afd1b5?exporter=dataverse_json&amp;persistentId=doi%3A10.7910/DVN/GAOC03" target="_blank">JSON</a>
                                                </li>
                                                <li><a href="https://dataverse.harvard.edu/api/datasets/export;jsessionid=766c983c5b26e981ce9871afd1b5?exporter=schema.org&amp;persistentId=doi%3A10.7910/DVN/GAOC03" target="_blank">Schema.org JSON-LD</a>
                                                </li>
                                        </ul></div></div>
    <!-- View Mode --><div class="panel-group">
            <div class="panel panel-default">
                <div data-toggle="collapse" data-target="#panelCollapse0" class="panel-heading text-info">
                    Citation Metadata  <span class="glyphicon glyphicon-chevron-up"></span>
                </div>
                <div id="panelCollapse0" class="collapse in">
                    <div class="panel-body metadata-panel-body">
                            <div class="form-group">
                                <label for="metadata_publicationDate" class="col-sm-3 control-label">
                                    <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="The unique persistent identifier for a Dataset, which can be a Handle or DOI in Dataverse.">
                                        Dataset Persistent ID
                                    </span>
                                </label>
                                <div class="col-sm-9">
                                    doi:10.7910/DVN/GAOC03
                                </div>
                            </div><div class="form-group">
                                <label for="metadata_publicationDate" class="col-sm-3 control-label">
                                    <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="The publication date of a dataset.">
                                        Publication Date
                                    </span>
                                </label>
                                <div class="col-sm-9">
                                    2018-03-16
                                </div></div>
                            <div class="form-group">
                                <label for="metadata_title" class="col-sm-3 control-label">
                                    <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="Full title by which the Dataset is known.">
                                        Title
                                    </span>
                                </label>
                                <!-- Primitive datasetFields --><div class="col-sm-9">The National Labor Force : SAKERNAS, 2008</div>
                                <!-- Compound datasetFields -->
                            </div>
                            <div class="form-group">
                                <label for="metadata_author" class="col-sm-3 control-label">
                                    <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="The person(s), corporate body(ies), or agency(ies) responsible for creating the work.">
                                        Author
                                    </span>
                                </label>
                                <!-- Primitive datasetFields -->
                                <!-- Compound datasetFields --><div class="col-sm-9">Badan Pusat Statistik
                                        <br /></div>
                            </div>
                            <div class="form-group">
                                <label for="metadata_datasetContact" class="col-sm-3 control-label">
                                    <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="The contact(s) for this Dataset.">
                                        Contact
                                    </span>
                                </label>
                                <!-- Primitive datasetFields -->
                                <!-- Compound datasetFields --><div class="col-sm-9">
                                        <p class="help-block">
                                            <span class="glyphicon glyphicon-info-sign"></span> Use email button above to contact.
                                        </p>Baldisserotto, John (Harvard University) 
                                        <br /></div>
                            </div>
                            <div class="form-group">
                                <label for="metadata_dsDescription" class="col-sm-3 control-label">
                                    <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="A summary describing the purpose, nature, and scope of the Dataset.">
                                        Description
                                    </span>
                                </label>
                                <!-- Primitive datasetFields -->
                                <!-- Compound datasetFields --><div class="col-sm-9">National labor force survey in Indonesia. Survei angkatan kerja nasional. 2008
                                        <br /></div>
                            </div>
                            <div class="form-group">
                                <label for="metadata_subject" class="col-sm-3 control-label">
                                    <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="Domain-specific Subject Categories that are topically relevant to the Dataset.">
                                        Subject
                                    </span>
                                </label>
                                <!-- Primitive datasetFields --><div class="col-sm-9">Social Sciences</div>
                                <!-- Compound datasetFields -->
                            </div>
                            <div class="form-group">
                                <label for="metadata_keyword" class="col-sm-3 control-label">
                                    <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="Key terms that describe important aspects of the Dataset.">
                                        Keyword
                                    </span>
                                </label>
                                <!-- Primitive datasetFields -->
                                <!-- Compound datasetFields --><div class="col-sm-9">Labor Supply, Indonesia, Statistics
                                        <br /></div>
                            </div>
                            <div class="form-group">
                                <label for="metadata_depositor" class="col-sm-3 control-label">
                                    <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="The person (Family Name, Given Name) or the name of the organization that deposited this Dataset to the repository.">
                                        Depositor
                                    </span>
                                </label>
                                <!-- Primitive datasetFields --><div class="col-sm-9">Baldisserotto, John</div>
                                <!-- Compound datasetFields -->
                            </div>
                            <div class="form-group">
                                <label for="metadata_dateOfDeposit" class="col-sm-3 control-label">
                                    <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="Date that the Dataset was deposited into the repository.">
                                        Deposit Date
                                    </span>
                                </label>
                                <!-- Primitive datasetFields --><div class="col-sm-9">2018-03-09</div>
                                <!-- Compound datasetFields -->
                            </div>
                    </div>
                </div>
            </div></div>
    <!-- Edit Mode --></div><div id="datasetForm:tabView:termsTab" class="ui-tabs-panel ui-widget-content ui-corner-bottom ui-helper-hidden" role="tabpanel" aria-hidden="true">
<!-- TERMS -->
    <div class="panel-group">
       <div class="panel panel-default">
           <div data-toggle="collapse" data-target="#panelCollapseTOU" class="panel-heading text-info">
               Terms of Use  <span class="glyphicon glyphicon-chevron-up"></span>
           </div>
           <div id="panelCollapseTOU" class="collapse in"><div id="datasetForm:tabView:touFragment">
                   <div class="panel-body">
                       <div class="form-group">
                           <label for="metadata_Terms" class="col-sm-3 control-label">
                               <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="The waiver informs data downloaders how they can use this dataset.">
                                   Waiver
                               </span>
                           </label>
                           <div class="col-sm-9">
                                   <p class="help-block">Our <a href="http://best-practices.dataverse.org/harvard-policies/community-norms.html" title="Dataverse Community Norms - Dataverse Best Practices" target="_blank">Community Norms</a> as well as good scientific practices expect that proper credit is given via citation. Please use the data citation above, generated by the Dataverse.
                                   </p>
                                   <p>No waiver has been selected for this dataset.</p>
                           </div>
                       </div><div class="form-group">
                           <label for="metadata_TermsUse" class="col-sm-3 control-label">
                               <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="Outlines how this data can be used once downloaded.">
                                   Terms of Use
                               </span>
                           </label>
                           <div class="col-sm-9">Licensed electronic resources are restricted to members of the Harvard community for purposes of research, teaching, and private study. Under Harvard's licenses for electronic resources, users generally may not: permit anyone other than authorized users to use the licensed materials; modify or create a derivative work of the licensed materials without the permission of the licensor; remove, obscure or modify any copyright or other notices included in the licensed materials; use the licensed materials for commercial purposes, including but not limited to the sale of the licensed materials. Users are individually responsible for compliance with these terms.
                           </div></div>

                       <!-- Additional Information
                       &lt;ui:fragment rendered="# {!empty editMode or empty editMode and (!empty termsOfUseAndAccess.confidentialityDeclaration 
                                            or !empty termsOfUseAndAccess.specialPermissions or !empty termsOfUseAndAccess.restrictions or !empty termsOfUseAndAccess.citationRequirements 
                                            or !empty termsOfUseAndAccess.depositorRequirements
                                            or !empty termsOfUseAndAccess.conditions or !empty termsOfUseAndAccess.disclaimer)}"&gt; -->
                       
                       <!-- &lt;/ui:fragment&gt;
                       END: Additional Information -->
                   </div></div>
           </div>
       </div><div class="panel panel-default">
           <div data-toggle="collapse" data-target="#panelCollapseTOA" class="panel-heading text-info">Restricted Files + Terms of Access
                <span class="glyphicon glyphicon-chevron-up"></span>
           </div>
           <div id="panelCollapseTOA" class="collapse in">
               <div class="panel-body"><div class="form-group">
                           <label for="metadata_RestrictedFiles" class="col-sm-3 control-label">
                               <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="The number of restricted files in this dataset.">
                                   Restricted Files
                               </span>
                           </label>
                           <div class="col-sm-9">
                               <p>There are 5 restricted files in this dataset.
                               </p>
                           </div></div><div class="form-group">
                           <label for="metadata_TermsAccess" class="col-sm-3 control-label">
                               <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="Information on how and if users can gain access to the restricted files in this dataset.">
                                   Terms of Access
                               </span>
                           </label>
                           <div class="col-sm-9">
                               <p>This dataset is restricted to members of the Harvard community for purposes of research, teaching, and private study. Harvard affiliates may access the data by logging into this system via the institutional login and selecting Harvard University.</p>
                           </div></div><div class="form-group">
                           <label for="metadata_RequestAccess" class="col-sm-3 control-label">
                               <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="If checked, users can request access to the restricted files in this dataset.">
                                   Request Access
                               </span>
                           </label>
                           <div class="col-sm-9">
                               <p>Users may not request access to files.
                               </p>
                           </div></div>

                   <!-- Additional Information
                   &lt;ui:fragment rendered="# {!empty editMode or empty editMode and (!empty termsOfUseAndAccess.dataAccessPlace 
                                        or !empty termsOfUseAndAccess.originalArchive or !empty termsOfUseAndAccess.availabilityStatus 
                                        or !empty termsOfUseAndAccess.contactForAccess or !empty termsOfUseAndAccess.sizeOfCollection 
                                        or !empty termsOfUseAndAccess.studyCompletion)}"&gt; -->
                       
                   <!-- &lt;/ui:fragment&gt;
                   END: Additional Information -->
               </div>
           </div></div><div class="panel panel-default">
           <div data-toggle="collapse" data-target="#panelCollapseGuestbook" class="panel-heading text-info">
               Guestbook  <span class="glyphicon glyphicon-chevron-up"></span>
           </div>
           <div id="panelCollapseGuestbook" class="collapse in">
               <div class="panel-body">
                   <div class="form-group">
                       <label for="metadata_Guestbook" class="col-sm-3 control-label">
                           <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="User information (i.e., name, email, institution, and position) will be collected when files are downloaded.">
                               Guestbook
                           </span>
                       </label>
                       <div class="col-sm-9">
                                   <p>No guestbook is assigned to this dataset, you will not be prompted to provide any information on file download.</p>
                       </div>
                   </div>
               </div>
           </div></div> 
    </div>
    <!-- / TERMS -->

    <!-- Preview Guestbook --><div id="datasetForm:tabView:previewGuestbook" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container largePopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:tabView:previewGuestbook_title" class="ui-dialog-title">Preview Guestbook</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
        <div class="form-horizontal">
            <p class="help-block">
                Upon downloading files the guestbook asks for the following information.
            </p>
            <div class="form-group">
                <label class="col-sm-3 control-label">
                    Guestbook Name
                </label>
                <div class="col-sm-8">
                    <p class="form-control-static">
                        
                    </p>
                </div>
            </div>
            <div class="form-group">
                <label class="col-sm-3 control-label">
                    <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="User data collected by the guestbook.">
                       Collected Data
                    </span>
                </label>
                <div class="col-sm-8">
                    <p class="form-control-static">Account Information
                        <ul>
                        </ul>
                    </p>
                </div>
            </div>
        </div>
        <div class="button-block">
            <button type="button" onclick="PF('viewGuestbook').hide()" class="btn btn-default" value="Close">
                Close
            </button>
        </div></div></div><script id="datasetForm:tabView:previewGuestbook_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","viewGuestbook",{id:"datasetForm:tabView:previewGuestbook",modal:true});});</script>
    <!-- / Preview Guestbook --></div><div id="datasetForm:tabView:versionsTab" class="ui-tabs-panel ui-widget-content ui-corner-bottom ui-helper-hidden" role="tabpanel" aria-hidden="true">
<!-- VERSIONS -->
   <script type="text/javascript">
       /* Version tab: Retrieve data after page load */
        $(document).ready(function () {
            preload_message = "(Loading versions...)";
            $('#datasetForm\\:tabView\\:versionsTable_data tr.ui-datatable-empty-message td').text(preload_message);
            postLoadVersionTabList();
       });
   </script>
   <!-- Retrieve version differences after the page load --><script type="text/javascript">postLoadVersionTabList = function() {PrimeFaces.ab({s:"datasetForm:tabView:j_idt1275",f:"datasetForm",p:"datasetForm:tabView:j_idt1275",u:"datasetForm:tabView:versionsTable",pa:arguments[0]});}</script>
    <div class="text-right margin-bottom"><button id="datasetForm:tabView:compareVersions" name="datasetForm:tabView:compareVersions" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PrimeFaces.ab({s:&quot;datasetForm:tabView:compareVersions&quot;,u:&quot;datasetForm&quot;,onco:function(xhr,status,args){PF('detailsBlocks').show();post_differences();;}});return false;" style="display:none" type="submit"><span class="ui-button-text ui-c">Direct</span></button><script id="datasetForm:tabView:compareVersions_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_tabView_compareVersions",{id:"datasetForm:tabView:compareVersions"});</script>
    </div><div id="datasetForm:tabView:versionsTable" class="ui-datatable ui-widget"><div class="ui-datatable-tablewrapper"><table role="grid"><thead id="datasetForm:tabView:versionsTable_head"><tr role="row"><th id="datasetForm:tabView:versionsTable:j_idt1283" class="ui-state-default col-sm-1 text-center" role="columnheader"><span class="ui-column-title">Dataset</span></th><th id="datasetForm:tabView:versionsTable:j_idt1296" class="ui-state-default" role="columnheader"><span class="ui-column-title">Summary</span></th><th id="datasetForm:tabView:versionsTable:j_idt1339" class="ui-state-default col-sm-3" role="columnheader"><span class="ui-column-title">Contributors</span></th><th id="datasetForm:tabView:versionsTable:j_idt1343" class="ui-state-default col-sm-2" role="columnheader"><span class="ui-column-title">Published</span></th></tr></thead><tbody id="datasetForm:tabView:versionsTable_data" class="ui-datatable-data ui-widget-content"><tr class="ui-widget-content ui-datatable-empty-message"><td colspan="4">No records found.</td></tr></tbody></table></div></div><script id="datasetForm:tabView:versionsTable_s" type="text/javascript">$(function(){PrimeFaces.cw("DataTable","versionsTable",{id:"datasetForm:tabView:versionsTable"});});</script>
<!-- / VERSIONS --></div></div><input type="hidden" id="datasetForm:tabView_activeIndex" name="datasetForm:tabView_activeIndex" value="0" autocomplete="off" /></div><script id="datasetForm:tabView_s" type="text/javascript">PrimeFaces.cw("TabView","content",{id:"datasetForm:tabView",effectDuration:"normal",scrollable:false,behaviors:{tabChange:function(ext,event) {PrimeFaces.ab({s:"datasetForm:tabView",e:"tabChange",p:"datasetForm:tabView",u:"datasetForm:tabView",onco:function(xhr,status,args){bind_bsui_components();;}},ext);}}});</script></div>
                    <!-- END View/Tabs infoMode -->

                    <!-- Create Metadata Tip -->

                    <!-- Create/Save Dataset Button Panel -->
                    <!-- END: Create/Save Dataset Button Panel --><div id="datasetForm:j_idt1354" class="ui-blockui-content ui-widget ui-widget-content ui-corner-all ui-helper-hidden ui-shadow"></div><script id="datasetForm:j_idt1354_s" type="text/javascript">$(function(){PrimeFaces.cw("BlockUI","blockDatasetForm",{id:"datasetForm:j_idt1354",block:"datasetForm"});});</script>

                    <!-- Popups --><div id="datasetForm:j_idt1356" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1356_title" class="ui-dialog-title">Restricted Files Selected</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-danger"><span class="glyphicon glyphicon-exclamation-sign"></span> The restricted file(s) selected may not be downloaded because you have not been granted access.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1361" name="datasetForm:j_idt1361" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('downloadInvalid').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1361_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1361",{id:"datasetForm:j_idt1361"});</script>
                        </div></div></div><script id="datasetForm:j_idt1356_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","downloadInvalid",{id:"datasetForm:j_idt1356",modal:true});});</script><div id="datasetForm:j_idt1363" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1363_title" class="ui-dialog-title">Restricted Files Selected</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-danger"><span class="glyphicon glyphicon-exclamation-sign"></span> The restricted file(s) selected may not be downloaded because you have not been granted access.</p>
                        <table>
                        </table>
                        <div class="button-block">
                            <p class="help-block"><span class="glyphicon glyphicon-info-sign"></span> Click Continue to download the files you have access to download.</p><button id="datasetForm:j_idt1371" name="datasetForm:j_idt1371" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('downloadMixed').hide();PrimeFaces.ab({s:&quot;datasetForm:j_idt1371&quot;,u:&quot;datasetForm&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Continue</span></button><script id="datasetForm:j_idt1371_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1371",{id:"datasetForm:j_idt1371"});</script><button id="datasetForm:j_idt1372" name="datasetForm:j_idt1372" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('downloadMixed').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1372_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1372",{id:"datasetForm:j_idt1372"});</script>
                        </div></div></div><script id="datasetForm:j_idt1363_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","downloadMixed",{id:"datasetForm:j_idt1363",modal:true});});</script><div id="datasetForm:j_idt1374" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1374_title" class="ui-dialog-title">Delete Dataset</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-warning"><span class="glyphicon glyphicon-warning-sign"></span> Are you sure you want to delete this dataset? You cannot undelete this dataset.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1376" name="datasetForm:j_idt1376" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('deleteConfirmation').hide();PrimeFaces.ab({s:&quot;datasetForm:j_idt1376&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Continue</span></button><script id="datasetForm:j_idt1376_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1376",{id:"datasetForm:j_idt1376"});</script><button id="datasetForm:j_idt1377" name="datasetForm:j_idt1377" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('deleteConfirmation').hide();PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1377_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1377",{id:"datasetForm:j_idt1377"});</script>
                        </div></div></div><script id="datasetForm:j_idt1374_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","deleteConfirmation",{id:"datasetForm:j_idt1374",modal:true});});</script><div id="datasetForm:j_idt1379" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1379_title" class="ui-dialog-title">Delete Draft Version</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-warning"><span class="glyphicon glyphicon-warning-sign"></span> Are you sure you want to delete this draft version? You cannot undelete this draft.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1381" name="datasetForm:j_idt1381" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('deleteVersionConfirmation').hide();PrimeFaces.ab({s:&quot;datasetForm:j_idt1381&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Continue</span></button><script id="datasetForm:j_idt1381_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1381",{id:"datasetForm:j_idt1381"});</script><button id="datasetForm:j_idt1382" name="datasetForm:j_idt1382" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('deleteVersionConfirmation').hide();PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1382_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1382",{id:"datasetForm:j_idt1382"});</script>
                        </div></div></div><script id="datasetForm:j_idt1379_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","deleteVersionConfirmation",{id:"datasetForm:j_idt1379",modal:true});});</script><div id="datasetForm:privateUrlId" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:privateUrlId_title" class="ui-dialog-title">Unpublished Dataset Private URL</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content"><div id="datasetForm:privateUrlPanelCannotCreate">
                            <p class="text-danger"><span class="glyphicon glyphicon-exclamation-sign"></span> Private URL can only be used with unpublished versions of datasets.</p>
                            <div class="button-block"><button id="datasetForm:j_idt1401" name="datasetForm:j_idt1401" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only btn btn-default" onclick="PF('privateUrlConfirmation').hide();PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1401_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1401",{id:"datasetForm:j_idt1401"});</script>
                            </div></div></div></div><script id="datasetForm:privateUrlId_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","privateUrlConfirmation",{id:"datasetForm:privateUrlId",modal:true});});</script><div id="datasetForm:j_idt1403" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1403_title" class="ui-dialog-title">Unpublished Dataset Private URL</span></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-warning"><span class="glyphicon glyphicon-warning-sign"></span> Are you sure you want to disable the Private URL? If you have shared the Private URL with others they will no longer be able to use it to access your unpublished dataset.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1405" name="datasetForm:j_idt1405" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only btn btn-default" onclick="PF('disablePrivateUrlConfirmation').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1405&quot;,u:&quot;datasetForm:privateUrlPanel messagePanel&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Yes, Disable Private URL</span></button><script id="datasetForm:j_idt1405_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1405",{id:"datasetForm:j_idt1405"});</script><button id="datasetForm:j_idt1406" name="datasetForm:j_idt1406" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only btn btn-default" onclick="PF('disablePrivateUrlConfirmation').hide();PF('privateUrlConfirmation').show();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1406_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1406",{id:"datasetForm:j_idt1406"});</script>
                        </div></div></div><script id="datasetForm:j_idt1403_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","disablePrivateUrlConfirmation",{id:"datasetForm:j_idt1403",modal:true});});</script><div id="datasetForm:j_idt1408" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1408_title" class="ui-dialog-title">Delete Files</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-warning"><span class="glyphicon glyphicon-warning-sign"></span> The file(s) will be deleted after you click on the Delete button.</p>
                            <p class="text-warning"><span class="glyphicon glyphicon-warning-sign"></span> Files will not be removed from previously published versions of the dataset.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1413" name="datasetForm:j_idt1413" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('deleteSelectedFileConfirmation').hide();PrimeFaces.ab({s:&quot;datasetForm:j_idt1413&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Delete</span></button><script id="datasetForm:j_idt1413_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1413",{id:"datasetForm:j_idt1413"});</script><button id="datasetForm:j_idt1414" name="datasetForm:j_idt1414" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('deleteSelectedFileConfirmation').hide();                                     PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1414_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1414",{id:"datasetForm:j_idt1414"});</script>
                        </div></div></div><script id="datasetForm:j_idt1408_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","deleteSelectedFileConfirmation",{id:"datasetForm:j_idt1408",modal:true});});</script><div id="datasetForm:j_idt1416" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1416_title" class="ui-dialog-title">Dataset Compute Not Supported</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-danger"><span class="glyphicon glyphicon-exclamation-sign"></span> You cannot compute on this dataset because this functionality is not enabled yet. Please click on a file to access computing features.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1418" name="datasetForm:j_idt1418" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('datasetComputeAccessDeniedPopup').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1418_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1418",{id:"datasetForm:j_idt1418"});</script>
                        </div></div></div><script id="datasetForm:j_idt1416_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","datasetComputeAccessDeniedPopup",{id:"datasetForm:j_idt1416",modal:true});});</script><div id="datasetForm:deaccessionBlock" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:deaccessionBlock_title" class="ui-dialog-title">Deaccession Dataset</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-warning"><span class="glyphicon glyphicon-warning-sign"></span> Once you deaccession this dataset it will no longer be viewable by the public.</p>
                        <div class="form-group">
                            <label for="reasonOptions">What is the reason for deaccession? <span class="glyphicon glyphicon-asterisk text-danger" title="Required field"></span></label><select id="datasetForm:reasonOptions" name="datasetForm:reasonOptions" class="form-control" size="1">	<option value="0" selected="selected">Select...</option>
	<option value="1">There is identifiable data in one or more files</option>
	<option value="2">The research article has been retracted</option>
	<option value="3">The dataset has been transferred to another repository</option>
	<option value="4">IRB request</option>
	<option value="5">Legal issue or Data Usage Agreement</option>
	<option value="6">Not a valid dataset</option>
	<option value="7">Other (Please type reason in space provided below)</option>
</select>
                        </div>
                        <div class="form-group">
                            <label for="reasonForDeaccession">
                                Please enter additional information about the reason for deaccession.
                            </label><textarea id="datasetForm:reasonForDeaccession" name="datasetForm:reasonForDeaccession" cols="40" rows="2" maxlength="2147483647" onkeyup="updateHiddenReason(this);" class="ui-inputfield ui-inputtextarea ui-widget ui-state-default ui-corner-all form-control"></textarea><script id="datasetForm:reasonForDeaccession_s" type="text/javascript">$(function(){PrimeFaces.cw("InputTextarea","reasonForDeaccession",{id:"datasetForm:reasonForDeaccession",autoResize:false});});</script><div id="datasetForm:j_idt1436" aria-live="polite" class="ui-message"></div>
                        </div>
                        <div class="form-group">
                            <label for="forwardURLForDeaccession">
                                If applicable, please leave a URL where this dataset can be accessed after deaccessioning.
                            </label><input id="datasetForm:forwardURLForDeaccession" name="datasetForm:forwardURLForDeaccession" type="text" value="" class="ui-inputfield ui-inputtext ui-widget ui-state-default ui-corner-all form-control" /><script id="datasetForm:forwardURLForDeaccession_s" type="text/javascript">PrimeFaces.cw("InputText","forwardURLForDeaccession",{id:"datasetForm:forwardURLForDeaccession"});</script><script id="datasetForm:watermark_s" type="text/javascript">$(function(){PrimeFaces.cw("Watermark","widget_datasetForm_watermark",{id:"datasetForm:watermark",value:"Optional dataset site, http:\/\/...",target:"datasetForm:forwardURLForDeaccession"},"watermark");});</script>
                        </div>
                        <div class="button-block"><a id="datasetForm:j_idt1441" href="#" class="ui-commandlink ui-widget btn btn-default" onclick="PF('deaccessionBlock').hide();PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1441&quot;});return false;" type="button">Cancel</a>
                        </div></div></div><script id="datasetForm:deaccessionBlock_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","deaccessionBlock",{id:"datasetForm:deaccessionBlock",modal:true});});</script><div id="datasetForm:deaccessionConfirmation" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:deaccessionConfirmation_title" class="ui-dialog-title">Deaccession Dataset</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-warning"><span class="glyphicon glyphicon-warning-sign"></span> Are you sure you want to deaccession? The selected version(s) will no longer be viewable by the public.</p>
                        <div class="button-block"><input type="submit" name="datasetForm:j_idt1444" value="Yes" class="btn btn-default" onclick="PF('deaccessionConfirmation').hide();                                     PF('deaccessionBlock').hide()" />
                            <button type="button" class="btn btn-default" value="No" onclick="PF('deaccessionConfirmation').hide()">No</button>
                        </div></div></div><script id="datasetForm:deaccessionConfirmation_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","deaccessionConfirmation",{id:"datasetForm:deaccessionConfirmation",modal:true});});</script><div id="datasetForm:deaccessionAllConfirmation" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:deaccessionAllConfirmation_title" class="ui-dialog-title">Deaccession Dataset</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-warning"><span class="glyphicon glyphicon-warning-sign"></span> Are you sure you want to deaccession this dataset? It will no longer be viewable by the public.</p>
                        <div class="button-block"><input type="submit" name="datasetForm:j_idt1447" value="Yes" class="btn btn-default" onclick="PF('deaccessionAllConfirmation').hide();                                     PF('deaccessionBlock').hide();                                     PF('blockDatasetForm').hide();" />
                            <button type="button" class="btn btn-default" value="No" onclick="PF('deaccessionAllConfirmation').hide();                                     PF('blockDatasetForm').hide();">No</button>
                        </div></div></div><script id="datasetForm:deaccessionAllConfirmation_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","deaccessionAllConfirmation",{id:"datasetForm:deaccessionAllConfirmation",modal:true});});</script><script id="datasetForm:selectDeaccessionVersion_s" type="text/javascript">$(function(){PrimeFaces.cw("ConfirmDialog","selectDeaccessionVersion",{id:"datasetForm:selectDeaccessionVersion"});});</script><div id="datasetForm:selectDeaccessionVersion" class="ui-confirm-dialog ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span class="ui-dialog-title">Please Select Version(s)</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content"><span class="ui-icon ui-icon-alert ui-confirm-dialog-severity"></span><span class="ui-confirm-dialog-message">Please select version(s) for deaccessioning.</span></div><div class="ui-dialog-buttonpane ui-dialog-footer ui-widget-content ui-helper-clearfix"></div></div><script id="datasetForm:selectDeaccessionReason_s" type="text/javascript">$(function(){PrimeFaces.cw("ConfirmDialog","selectDeaccessionReason",{id:"datasetForm:selectDeaccessionReason"});});</script><div id="datasetForm:selectDeaccessionReason" class="ui-confirm-dialog ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span class="ui-dialog-title">Please Select Reason</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content"><span class="ui-icon ui-icon-alert ui-confirm-dialog-severity"></span><span class="ui-confirm-dialog-message">Please select reason for deaccessioning.</span></div><div class="ui-dialog-buttonpane ui-dialog-footer ui-widget-content ui-helper-clearfix"></div></div><script id="datasetForm:enterForwardUrl_s" type="text/javascript">$(function(){PrimeFaces.cw("ConfirmDialog","enterForwardUrl",{id:"datasetForm:enterForwardUrl"});});</script><div id="datasetForm:enterForwardUrl" class="ui-confirm-dialog ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span class="ui-dialog-title">Invalid URL</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content"><span class="ui-icon ui-icon-alert ui-confirm-dialog-severity"></span><span class="ui-confirm-dialog-message">Please enter valid forwarding URL.</span></div><div class="ui-dialog-buttonpane ui-dialog-footer ui-widget-content ui-helper-clearfix"></div></div><script id="datasetForm:enterOtherReason_s" type="text/javascript">$(function(){PrimeFaces.cw("ConfirmDialog","enterOtherReason",{id:"datasetForm:enterOtherReason"});});</script><div id="datasetForm:enterOtherReason" class="ui-confirm-dialog ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span class="ui-dialog-title">Enter additional information</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content"><span class="ui-icon ui-icon-alert ui-confirm-dialog-severity"></span><span class="ui-confirm-dialog-message">Please enter text for reason for deaccessioning.</span></div><div class="ui-dialog-buttonpane ui-dialog-footer ui-widget-content ui-helper-clearfix"></div></div><script id="datasetForm:reasonTooManyCharacters_s" type="text/javascript">$(function(){PrimeFaces.cw("ConfirmDialog","reasonTooManyCharacters",{id:"datasetForm:reasonTooManyCharacters"});});</script><div id="datasetForm:reasonTooManyCharacters" class="ui-confirm-dialog ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span class="ui-dialog-title">Limit 1000 characters</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content"><span class="ui-icon ui-icon-alert ui-confirm-dialog-severity"></span><span class="ui-confirm-dialog-message">Text for reason for deaccessioning may be no longer than 1000 characters.</span></div><div class="ui-dialog-buttonpane ui-dialog-footer ui-widget-content ui-helper-clearfix"></div></div><input id="datasetForm:hiddenReasonInput" name="datasetForm:hiddenReasonInput" type="text" style="display:none" class="ui-inputfield ui-inputtext ui-widget ui-state-default ui-corner-all" /><script id="datasetForm:hiddenReasonInput_s" type="text/javascript">PrimeFaces.cw("InputText","hiddenReasonInput",{id:"datasetForm:hiddenReasonInput"});</script><div id="datasetForm:compareTwo" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:compareTwo_title" class="ui-dialog-title">Version Differences Details</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="help-block"><span class="glyphicon glyphicon-warning-sign text-danger"></span> <span class="text-danger">Please select two versions to view the differences.</span></p>
                        <div class="button-block"><button id="datasetForm:j_idt1450" name="datasetForm:j_idt1450" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('compareTwo').hide();PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Close</span></button><script id="datasetForm:j_idt1450_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1450",{id:"datasetForm:j_idt1450"});</script>
                        </div></div></div><script id="datasetForm:compareTwo_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","compareTwo",{id:"datasetForm:compareTwo",modal:true});});</script><div id="datasetForm:detailsBlocks" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container largePopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:detailsBlocks_title" class="ui-dialog-title">Version Differences Details</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <div id="version-title" class="margin-bottom-half"></div>
                        <div id="version-details-block" class=" clearfix margin-bottom-half">
                            <div class="pull-left">
                                 
                            </div>
                            <div class="pull-left">
                                Version: <br />
                                Last Updated: 
                            </div>
                            <div class="pull-left">
                                Version: <br />
                                Last Updated: 
                            </div>
                        </div>
                        <div class="button-block margin-bottom"><button id="datasetForm:j_idt1527" name="datasetForm:j_idt1527" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('detailsBlocks').hide();PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Done</span></button><script id="datasetForm:j_idt1527_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1527",{id:"datasetForm:j_idt1527"});</script>
                        </div></div></div><script id="datasetForm:detailsBlocks_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","detailsBlocks",{id:"datasetForm:detailsBlocks",modal:true});});</script><div id="datasetForm:selectFilesForDownload" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:selectFilesForDownload_title" class="ui-dialog-title">Select File(s)</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-danger"><span class="glyphicon glyphicon-exclamation-sign"></span> Please select a file or files to be downloaded.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1530" name="datasetForm:j_idt1530" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('selectFilesForDownload').hide();PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1530&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Close</span></button><script id="datasetForm:j_idt1530_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1530",{id:"datasetForm:j_idt1530"});</script>
                        </div></div></div><script id="datasetForm:selectFilesForDownload_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","selectFilesForDownload",{id:"datasetForm:selectFilesForDownload",modal:true});});</script><div id="datasetForm:selectFilesForRequestAccess" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:selectFilesForRequestAccess_title" class="ui-dialog-title">Select File(s)</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-danger"><span class="glyphicon glyphicon-exclamation-sign"></span> Please select a file or files for access request.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1533" name="datasetForm:j_idt1533" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('selectFilesForRequestAccess').hide();                                     PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1533&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Close</span></button><script id="datasetForm:j_idt1533_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1533",{id:"datasetForm:j_idt1533"});</script>
                        </div></div></div><script id="datasetForm:selectFilesForRequestAccess_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","selectFilesForRequestAccess",{id:"datasetForm:selectFilesForRequestAccess",modal:true});});</script><div id="datasetForm:selectFilesForDelete" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:selectFilesForDelete_title" class="ui-dialog-title">Select File(s)</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-danger"><span class="glyphicon glyphicon-exclamation-sign"></span> Please select a file or files to be deleted.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1536" name="datasetForm:j_idt1536" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('selectFilesForDelete').hide();PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1536&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Close</span></button><script id="datasetForm:j_idt1536_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1536",{id:"datasetForm:j_idt1536"});</script>
                        </div></div></div><script id="datasetForm:selectFilesForDelete_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","selectFilesForDelete",{id:"datasetForm:selectFilesForDelete",modal:true});});</script><div id="datasetForm:selectFilesForRestrict" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:selectFilesForRestrict_title" class="ui-dialog-title">Select File(s)</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-danger"><span class="glyphicon glyphicon-exclamation-sign"></span> Please select unrestricted file(s) to be restricted.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1539" name="datasetForm:j_idt1539" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('selectFilesForRestrict').hide();PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1539&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Close</span></button><script id="datasetForm:j_idt1539_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1539",{id:"datasetForm:j_idt1539"});</script>
                        </div></div></div><script id="datasetForm:selectFilesForRestrict_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","selectFilesForRestrict",{id:"datasetForm:selectFilesForRestrict",modal:true});});</script><div id="datasetForm:selectFilesForUnRestrict" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:selectFilesForUnRestrict_title" class="ui-dialog-title">Select File(s)</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-danger"><span class="glyphicon glyphicon-exclamation-sign"></span> Please select restricted file(s) to be unrestricted.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1542" name="datasetForm:j_idt1542" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('selectFilesForUnRestrict').hide();PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1542&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Close</span></button><script id="datasetForm:j_idt1542_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1542",{id:"datasetForm:j_idt1542"});</script>
                        </div></div></div><script id="datasetForm:selectFilesForUnRestrict_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","selectFilesForUnRestrict",{id:"datasetForm:selectFilesForUnRestrict",modal:true});});</script><div id="datasetForm:selectFilesForEditMetadata" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:selectFilesForEditMetadata_title" class="ui-dialog-title">Select File(s)</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-danger"><span class="glyphicon glyphicon-exclamation-sign"></span> Please select a file or files to be edited.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1545" name="datasetForm:j_idt1545" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('selectFilesForEditMetadata').hide();PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1545&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Close</span></button><script id="datasetForm:j_idt1545_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1545",{id:"datasetForm:j_idt1545"});</script>
                        </div></div></div><script id="datasetForm:selectFilesForEditMetadata_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","selectFilesForEditMetadata",{id:"datasetForm:selectFilesForEditMetadata",modal:true});});</script><div id="datasetForm:selectFilesForEditTags" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:selectFilesForEditTags_title" class="ui-dialog-title">Select File(s)</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-danger"><span class="glyphicon glyphicon-exclamation-sign"></span> Please select a file or files to be edited.</p>
                        <div class="button-block"><button id="datasetForm:j_idt1548" name="datasetForm:j_idt1548" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('selectFilesForEditTags').hide();PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1548&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Close</span></button><script id="datasetForm:j_idt1548_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1548",{id:"datasetForm:j_idt1548"});</script>
                        </div></div></div><script id="datasetForm:selectFilesForEditTags_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","selectFilesForEditTags",{id:"datasetForm:selectFilesForEditTags",modal:true});});</script><script type="text/javascript">refreshTagsCommand = function() {PrimeFaces.ab({s:"datasetForm:j_idt1550",f:"datasetForm",u:"datasetForm:fileTagsPopup",onco:function(xhr,status,args){PF('fileTagsPopup').show();;},pa:arguments[0]});}</script>

                    <!-- We no longer need this remoteCommand; see my comments in the javascript method testFilesSelectedForEditMetadata() -->
                    <!-- for more info. - L.A. 4.2.1 -->
                    <!-- p:remoteCommand  name="openEditFilesPageCommand" action=" {DatasetPage.editFileMetadata()}"  / --><div id="datasetForm:fileTagsPopup" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:fileTagsPopup_title" class="ui-dialog-title">Edit Tags</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="help-block"><span class="glyphicon glyphicon-info-sign"></span> Select existing file tags or create new tags to describe your files. Each file can have more than one tag.</p>
                        <div class="button-block"><button id="datasetForm:fileTagsPopupSaveButton" name="datasetForm:fileTagsPopupSaveButton" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only btn btn-default" onclick="PrimeFaces.ab({s:&quot;datasetForm:fileTagsPopupSaveButton&quot;,u:&quot;datasetForm:tabView:filesTable datasetForm&quot;,onco:function(xhr,status,args){PF('fileTagsPopup').hide();}});return false;" type="submit"><span class="ui-button-text ui-c">Save Changes</span></button><script id="datasetForm:fileTagsPopupSaveButton_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_fileTagsPopupSaveButton",{id:"datasetForm:fileTagsPopupSaveButton"});</script><button id="datasetForm:fileTagsPopupCancelButton" name="datasetForm:fileTagsPopupCancelButton" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only btn btn-default" onclick="PF('fileTagsPopup').hide();PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:fileTagsPopupCancelButton&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:fileTagsPopupCancelButton_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_fileTagsPopupCancelButton",{id:"datasetForm:fileTagsPopupCancelButton"});</script>
                        </div></div></div><script id="datasetForm:fileTagsPopup_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","fileTagsPopup",{id:"datasetForm:fileTagsPopup",modal:true});});</script><div id="datasetForm:rsyncUploadInfoPopup" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:rsyncUploadInfoPopup_title" class="ui-dialog-title">Upload Files</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <!-- RSYNC UPLOAD POPUP -->
                            <p class="help-block">
                                <span class="glyphicon glyphicon-warning-sign text-danger"></span><span class="text-danger"> You can not upload additional files to this dataset.</span>
                            </p>
                        <div class="button-block"><button id="datasetForm:j_idt1604" name="datasetForm:j_idt1604" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('rsyncUpload_popup').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1604&quot;,u:&quot;datasetForm messagePanel&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Close</span></button><script id="datasetForm:j_idt1604_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1604",{id:"datasetForm:j_idt1604"});</script>
                        </div>
                        <!-- END RSYNC UPLOAD POPUP --></div></div><script id="datasetForm:rsyncUploadInfoPopup_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","rsyncUpload_popup",{id:"datasetForm:rsyncUploadInfoPopup",modal:true,behaviors:{close:function(ext,event) {PrimeFaces.ab({s:"datasetForm:rsyncUploadInfoPopup",e:"close",p:"datasetForm:rsyncUploadInfoPopup",u:"datasetForm messagePanel"},ext);}}});});</script>

                    <!-- Request Access Sign Up/Log In Button --><div id="datasetForm:j_idt1607" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1607_title" class="ui-dialog-title">Request Access</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="help-block">
                            <span class="glyphicon glyphicon-warning-sign text-danger"></span> 
                            <span class="text-danger">You need to <a href="/dataverseuser.xhtml?redirectPage=%2Fdataset.xhtml%3FpersistentId%3Ddoi%3A10.7910%2FDVN%2FGAOC03&amp;editMode=CREATE" target="_self" title="Sign Up for a Dataverse Account">Sign Up</a> or <a href="/loginpage.xhtml?redirectPage=%2Fdataset.xhtml%3FpersistentId%3Ddoi%3A10.7910%2FDVN%2FGAOC03" target="_self" title="Log into your Dataverse Account">Log In</a> to request access to this file.</span>
                        </p>
                        <div class="button-block"><button id="datasetForm:j_idt1613" name="datasetForm:j_idt1613" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('accessSignUpLogIn_popup').hide();                                     PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1613&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Close</span></button><script id="datasetForm:j_idt1613_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1613",{id:"datasetForm:j_idt1613"});</script>
                        </div></div></div><script id="datasetForm:j_idt1607_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","accessSignUpLogIn_popup",{id:"datasetForm:j_idt1607",modal:true});});</script>
                    <!-- END: Request Access Sign Up/Log In Button --><div id="datasetForm:downloadPopup" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container largePopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:downloadPopup_title" class="ui-dialog-title">Download File</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
        <p class="help-block">
            <span class="glyphicon glyphicon-info-sign"></span> Please confirm and/or complete the information needed below in order to download files in this dataset.
        </p><div id="datasetForm:guestbookMessages">
            <div class="container messagePanel">
            </div></div>
        <div class="form-horizontal"><div class="form-group">
                <label class="col-sm-3 control-label" for="guestbook_tou">
                    Terms of Use
                </label>
                <div class="col-sm-6">
                    <div class="panel panel-default">
                        <div class="panel-body read-terms">Licensed electronic resources are restricted to members of the Harvard community for purposes of research, teaching, and private study. Under Harvard's licenses for electronic resources, users generally may not: permit anyone other than authorized users to use the licensed materials; modify or create a derivative work of the licensed materials without the permission of the licensor; remove, obscure or modify any copyright or other notices included in the licensed materials; use the licensed materials for commercial purposes, including but not limited to the sale of the licensed materials. Users are individually responsible for compliance with these terms.
                        </div>
                    </div>
                </div></div><div class="form-group">
                <label class="col-sm-3 control-label" for="guestbook_toa">
                    Terms of Access
                </label>
                <div class="col-sm-6">
                    <div class="panel panel-default">
                        <div class="panel-body read-terms">This dataset is restricted to members of the Harvard community for purposes of research, teaching, and private study. Harvard affiliates may access the data by logging into this system via the institutional login and selecting Harvard University.
                        </div>
                    </div>
                </div></div>
        </div>
        <div class="button-block"><a id="datasetForm:j_idt1690" href="#" class="ui-commandlink ui-widget btn btn-default" onclick="PrimeFaces.ab({s:&quot;datasetForm:j_idt1690&quot;,p:&quot;datasetForm:j_idt1690&quot;,u:&quot;@([id$=Messages])&quot;,onco:function(xhr,status,args){if (args &amp;&amp; !args.validationFailed) PF('downloadPopup').hide();;},pa:[{name:&quot;DO_GB_VALIDATION&quot;,value:&quot;true&quot;}]});return false;" type="button">Accept</a>
            <button type="button" class="btn btn-default" onclick="PF('downloadPopup').hide();PF('blockDatasetForm').hide();" value="Cancel">Cancel</button>
        </div></div></div><script id="datasetForm:downloadPopup_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","downloadPopup",{id:"datasetForm:downloadPopup",modal:true});});</script><div id="datasetForm:requestAccessPopup" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container largePopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:requestAccessPopup_title" class="ui-dialog-title">Request Access</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
        <p class="help-block">
            <span class="glyphicon glyphicon-info-sign"></span> Please confirm and/or complete the information needed below in order to request access to files in this dataset.
        </p>
        
        <div class="form-horizontal"><div class="form-group">
                <label class="col-sm-3 control-label" for="guestbook_tou">
                    Terms of Use
                </label>
                <div class="col-sm-6">
                    <div class="panel panel-default">
                        <div class="panel-body read-terms">Licensed electronic resources are restricted to members of the Harvard community for purposes of research, teaching, and private study. Under Harvard's licenses for electronic resources, users generally may not: permit anyone other than authorized users to use the licensed materials; modify or create a derivative work of the licensed materials without the permission of the licensor; remove, obscure or modify any copyright or other notices included in the licensed materials; use the licensed materials for commercial purposes, including but not limited to the sale of the licensed materials. Users are individually responsible for compliance with these terms.
                        </div>
                    </div>
                </div></div><div class="form-group">
                <label class="col-sm-3 control-label" for="guestbook_toa">
                    Terms of Access
                </label>
                <div class="col-sm-6">
                    <div class="panel panel-default">
                        <div class="panel-body read-terms">This dataset is restricted to members of the Harvard community for purposes of research, teaching, and private study. Harvard affiliates may access the data by logging into this system via the institutional login and selecting Harvard University.
                        </div>
                    </div>
                </div></div>
        </div>
        <div class="button-block"><a id="datasetForm:j_idt1711" href="#" class="ui-commandlink ui-widget btn btn-default" onclick="PrimeFaces.ab({s:&quot;datasetForm:j_idt1711&quot;,u:&quot;@([id$=requestAccessPopupButton])&quot;,onco:function(xhr,status,args){PF('requestAccessPopup').hide();;}});return false;" type="button">
                Accept
            </a>
            <button type="button" class="btn btn-default" onclick="PF('requestAccessPopup').hide();PF('blockDatasetForm').hide();" value="Cancel">Cancel</button>
        </div></div></div><script id="datasetForm:requestAccessPopup_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","requestAccessPopup",{id:"datasetForm:requestAccessPopup",modal:true});});</script><div id="datasetForm:downloadDataSubsetPopup" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container smallPopUp"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:downloadDataSubsetPopup_title" class="ui-dialog-title">Download Data Subset</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content"></div></div><script id="datasetForm:downloadDataSubsetPopup_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","downloadDataSubsetPopup",{id:"datasetForm:downloadDataSubsetPopup",modal:true});});</script><div id="datasetForm:j_idt1718" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1718_title" class="ui-dialog-title">Data Not Published</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="help-block">
                            <span class="text-danger"><span class="glyphicon glyphicon-warning-sign"></span> In order to map your data with WorldMap, your data must be published. Please publish this dataset, then retry the Map Data feature.</span>
                        </p>
                        <div class="button-block">
                            <button type="button" class="btn btn-default" onclick="PF('mapData_popup').hide();PF('blockDatasetForm').hide();">
                                Close
                            </button>
                        </div></div></div><script id="datasetForm:j_idt1718_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","mapData_popup",{id:"datasetForm:j_idt1718",modal:true});});</script><div id="datasetForm:linkDatasetForm" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:linkDatasetForm_title" class="ui-dialog-title">Link Dataset</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <div class="button-block">
                            <button type="button" class="btn btn-default" onclick="PF('linkDatasetForm').hide();PF('blockDatasetForm').hide();">
                                Cancel
                            </button>
                        </div></div></div><script id="datasetForm:linkDatasetForm_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","linkDatasetForm",{id:"datasetForm:linkDatasetForm",modal:true});});</script><div id="datasetForm:accessPopup" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:accessPopup_title" class="ui-dialog-title">File Restrictions</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                            <div class="form-horizontal">
                                <div class="form-group">
                                    <label for="metadata_TermsAccess" class="col-sm-3 control-label">
                                        <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="Information on how and if users can gain access to the restricted files in this dataset.">
                                            Terms of Access
                                        </span>
                                    </label>
                                    <div class="col-sm-9"><textarea id="datasetForm:j_idt1745" name="datasetForm:j_idt1745" cols="20" rows="5" maxlength="2147483647" class="ui-inputfield ui-inputtextarea ui-widget ui-state-default ui-corner-all form-control">This dataset is restricted to members of the Harvard community for purposes of research, teaching, and private study. Harvard affiliates may access the data by logging into this system via the institutional login and selecting Harvard University.

</textarea><script id="datasetForm:j_idt1745_s" type="text/javascript">$(function(){PrimeFaces.cw("InputTextarea","inputtoa",{id:"datasetForm:j_idt1745",autoResize:false});});</script>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <label for="metadata_RequestAccess" class="col-sm-3 control-label">
                                        <span data-toggle="tooltip" data-placement="auto right" class="tooltiplabel text-info" data-original-title="If checked, users can request access to the restricted files in this dataset.">
                                            Request Access
                                        </span>
                                    </label>
                                    <div class="col-sm-9"><div id="datasetForm:requestAccess" class="ui-chkbox ui-widget"><div class="ui-helper-hidden-accessible"><input id="datasetForm:requestAccess_input" name="datasetForm:requestAccess_input" type="checkbox" autocomplete="off" aria-checked="false" /></div><div class="ui-chkbox-box ui-widget ui-corner-all ui-state-default"><span class="ui-chkbox-icon ui-icon ui-icon-blank ui-c"></span></div><span class="ui-chkbox-label">Enable access request</span></div><script id="datasetForm:requestAccess_s" type="text/javascript">PrimeFaces.cw("SelectBooleanCheckbox","inputfar",{id:"datasetForm:requestAccess"});</script>
                                    </div>
                                </div>
                            </div>
                            <div class="button-block"><button id="datasetForm:j_idt1749" name="datasetForm:j_idt1749" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('accessPopup').hide();PrimeFaces.ab({s:&quot;datasetForm:j_idt1749&quot;,u:&quot;datasetForm messagePanel&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Continue</span></button><script id="datasetForm:j_idt1749_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1749",{id:"datasetForm:j_idt1749"});</script><button id="datasetForm:j_idt1752" name="datasetForm:j_idt1752" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('accessPopup').hide();PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1752_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1752",{id:"datasetForm:j_idt1752"});</script>
                            </div></div></div><script id="datasetForm:accessPopup_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","accessPopup",{id:"datasetForm:accessPopup",modal:true});});</script><div id="datasetForm:inreview" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:inreview_title" class="ui-dialog-title">Submit for Review</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-warning">
                            <span class="glyphicon glyphicon-warning-sign"></span> You will not be able to make changes to this dataset while it is in review.
                        </p>
                        <div class="button-block"><button id="datasetForm:j_idt1755" name="datasetForm:j_idt1755" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('inreview').hide();                                     PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1755&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Submit</span></button><script id="datasetForm:j_idt1755_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1755",{id:"datasetForm:j_idt1755"});</script><button id="datasetForm:j_idt1756" name="datasetForm:j_idt1756" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('inreview').hide();PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1756_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1756",{id:"datasetForm:j_idt1756"});</script>
                        </div></div></div><script id="datasetForm:inreview_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","inreview",{id:"datasetForm:inreview",modal:true});});</script>

                    <!-- Publish/Submit for Review Dialogs --><div id="datasetForm:j_idt1759" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1759_title" class="ui-dialog-title">Publish Dataset</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-warning">
                            <span class="glyphicon glyphicon-warning-sign"></span> Are you sure you want to publish this dataset? Once you do so it must remain published.
                        </p><div id="terms-agreement-block" class="well">By default datasets are published with the CC0-“Public Domain Dedication” waiver. Learn more about the CC0 waiver <a target=_blank href='http://creativecommons.org/choose/zero/'>here</a>. <br><br> To publish with custom Terms of Use, click the Cancel button and go to the Terms tab for this dataset.</div>
                        <div class="button-block"><button id="datasetForm:j_idt1764" name="datasetForm:j_idt1764" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('publishConfirm').hide();                                     PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1764&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Continue</span></button><script id="datasetForm:j_idt1764_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1764",{id:"datasetForm:j_idt1764"});</script><button id="datasetForm:j_idt1765" name="datasetForm:j_idt1765" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('publishConfirm').hide();PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1765_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1765",{id:"datasetForm:j_idt1765"});</script>
                        </div></div></div><script id="datasetForm:j_idt1759_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","publishConfirm",{id:"datasetForm:j_idt1759",modal:true,width:"70%"});});</script><div id="datasetForm:j_idt1767" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1767_title" class="ui-dialog-title">Publish Dataset</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-warning">
                            <span class="glyphicon glyphicon-warning-sign"></span>This dataset cannot be published until 
                                    <a href="/dataverse/nds" title="Numeric Data Services Dataverse">Numeric Data Services Dataverse
                                    </a> is published. Would you like to publish both right now?
                        </p><div id="terms-agreement-block" class="well">By default datasets are published with the CC0-“Public Domain Dedication” waiver. Learn more about the CC0 waiver 
<a href="http://creativecommons.org/choose/zero/" rel="nofollow" target="_blank">here</a>. 
<br>
<br> To publish with custom Terms of Use, click the Cancel button and go to the Terms tab for this dataset.</div>
                        <p class="help-block">
                            <span class="glyphicon glyphicon-info-sign"></span> Once you publish this dataset it must remain published.
                        </p>
                        <div class="button-block"><button id="datasetForm:j_idt1778" name="datasetForm:j_idt1778" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('publishParent').hide();                                     PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1778&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Yes, Publish Both</span></button><script id="datasetForm:j_idt1778_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1778",{id:"datasetForm:j_idt1778"});</script><button id="datasetForm:j_idt1779" name="datasetForm:j_idt1779" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('publishParent').hide();PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1779_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1779",{id:"datasetForm:j_idt1779"});</script>
                        </div></div></div><script id="datasetForm:j_idt1767_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","publishParent",{id:"datasetForm:j_idt1767",modal:true,width:"70%"});});</script><div id="datasetForm:j_idt1781" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1781_title" class="ui-dialog-title">Publish Dataset</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-warning">
                            <span class="glyphicon glyphicon-warning-sign"></span> Are you sure you want to republish this dataset?
                        </p><div id="terms-agreement-block" class="well">By default datasets are published with the CC0-“Public Domain Dedication” waiver. Learn more about the CC0 waiver 
<a href="http://creativecommons.org/choose/zero/" rel="nofollow" target="_blank">here</a>. 
<br>
<br> To publish with custom Terms of Use, click the Cancel button and go to the Terms tab for this dataset.</div>
                            <p class="help-block">
                                <span class="glyphicon glyphicon-info-sign"></span> Select if this is a minor or major version update.
                            </p><table id="datasetForm:options" class="ui-selectoneradio ui-widget"><tr><td><div class="ui-radiobutton ui-widget"><div class="ui-helper-hidden-accessible"><input id="datasetForm:options:0" name="datasetForm:options" type="radio" value="1" checked="checked" /></div><div class="ui-radiobutton-box ui-widget ui-corner-all ui-state-default ui-state-active"><span class="ui-radiobutton-icon ui-icon ui-icon-bullet ui-c"></span></div></div></td><td><label for="datasetForm:options:0">Minor Release (1.1)</label></td><td><div class="ui-radiobutton ui-widget"><div class="ui-helper-hidden-accessible"><input id="datasetForm:options:1" name="datasetForm:options" type="radio" value="2" /></div><div class="ui-radiobutton-box ui-widget ui-corner-all ui-state-default"><span class="ui-radiobutton-icon ui-icon ui-icon-blank ui-c"></span></div></div></td><td><label for="datasetForm:options:1">Major Release (2.0)</label></td></tr></table><script id="datasetForm:options_s" type="text/javascript">$(function(){PrimeFaces.cw("SelectOneRadio","widget_datasetForm_options",{id:"datasetForm:options"});});</script>
                        <p>
                        </p>
                        <div class="button-block"><button id="datasetForm:j_idt1793" name="datasetForm:j_idt1793" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('releaseDraft').hide();PF('blockDatasetForm').hide();;PrimeFaces.ab({s:&quot;datasetForm:j_idt1793&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Continue</span></button><script id="datasetForm:j_idt1793_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1793",{id:"datasetForm:j_idt1793"});</script><button id="datasetForm:j_idt1795" name="datasetForm:j_idt1795" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('releaseDraft').hide();PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1795_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1795",{id:"datasetForm:j_idt1795"});</script>
                        </div></div></div><script id="datasetForm:j_idt1781_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","releaseDraft",{id:"datasetForm:j_idt1781",modal:true,width:"70%"});});</script><div id="datasetForm:j_idt1797" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1797_title" class="ui-dialog-title">Publish Dataset</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-danger">
                            <span class="glyphicon glyphicon-exclamation-sign"></span>This dataset cannot be published until 
                                    <a href="/dataverse.xhtml?alias=nds" title="Numeric Data Services Dataverse">Numeric Data Services Dataverse
                                    </a>  is published by its administrator.
                        </p>
                        <div class="button-block"><button id="datasetForm:j_idt1805" name="datasetForm:j_idt1805" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('mayNotRelease').hide();                                     PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Close</span></button><script id="datasetForm:j_idt1805_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1805",{id:"datasetForm:j_idt1805"});</script>
                        </div></div></div><script id="datasetForm:j_idt1797_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","mayNotRelease",{id:"datasetForm:j_idt1797",modal:true});});</script><div id="datasetForm:j_idt1807" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1807_title" class="ui-dialog-title">Publish Dataset</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-danger">
                            <span class="glyphicon glyphicon-exclamation-sign"></span>This dataset cannot be published until 
                                    <a href="/dataverse/nds" title="Numeric Data Services Dataverse">Numeric Data Services Dataverse
                                    </a> and 
                                    <a href="/dataverse/HarvardSubscriptionData" title="Harvard Subscription Data Dataverse">Harvard Subscription Data Dataverse
                                    </a>  are published.
                        </p>
                        <div class="button-block"><button id="datasetForm:j_idt1819" name="datasetForm:j_idt1819" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('maynotPublishParent').hide();                                     PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Close</span></button><script id="datasetForm:j_idt1819_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1819",{id:"datasetForm:j_idt1819"});</script>
                        </div></div></div><script id="datasetForm:j_idt1807_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","maynotPublishParent",{id:"datasetForm:j_idt1807",modal:true});});</script><div id="datasetForm:j_idt1821" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="datasetForm:j_idt1821_title" class="ui-dialog-title">Return to Author</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
                        <p class="text-warning">
                            <span class="glyphicon glyphicon-warning-sign"></span> Return this dataset to contributor for modification.
                        </p>
                        

                        <div class="button-block"><button id="datasetForm:j_idt1823" name="datasetForm:j_idt1823" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('sendBackToContributor').hide();PrimeFaces.ab({s:&quot;datasetForm:j_idt1823&quot;});return false;" type="submit"><span class="ui-button-text ui-c">Continue</span></button><script id="datasetForm:j_idt1823_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1823",{id:"datasetForm:j_idt1823"});</script><button id="datasetForm:j_idt1824" name="datasetForm:j_idt1824" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" onclick="PF('sendBackToContributor').hide();PF('blockDatasetForm').hide();;" type="button"><span class="ui-button-text ui-c">Cancel</span></button><script id="datasetForm:j_idt1824_s" type="text/javascript">PrimeFaces.cw("CommandButton","widget_datasetForm_j_idt1824",{id:"datasetForm:j_idt1824"});</script>
                        </div></div></div><script id="datasetForm:j_idt1821_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","sendBackToContributor",{id:"datasetForm:j_idt1821",modal:true});});</script><script type="text/javascript">returnToAuthorCommand = function() {PrimeFaces.ab({s:"datasetForm:j_idt1826",f:"datasetForm",pa:arguments[0]});}</script><script id="datasetForm:enterReturnReason_s" type="text/javascript">$(function(){PrimeFaces.cw("ConfirmDialog","enterReturnReason",{id:"datasetForm:enterReturnReason"});});</script><div id="datasetForm:enterReturnReason" class="ui-confirm-dialog ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span class="ui-dialog-title">Required entry</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content"><span class="ui-icon ui-icon-alert ui-confirm-dialog-severity"></span><span class="ui-confirm-dialog-message">Reason for return to author is required</span></div><div class="ui-dialog-buttonpane ui-dialog-footer ui-widget-content ui-helper-clearfix"></div></div>                   
                    
                     <!-- END: Publish/Submit for Review Dialogs --><input type="hidden" name="javax.faces.ViewState" id="j_id1:javax.faces.ViewState:0" value="4819980655092063622:4398188165106853993" autocomplete="off" />
</form>
                <script type="text/javascript" src="/resources/js/dropins.js" id="dropboxjs"></script>
                <script type="text/javascript">
                    $(document).ready(function () {
                        popoverHTML('Allowed HTML Tags');
                    });
                    
                    function testReturnReason(){
                        var returnReasonText = PF('returnReason').jq.val();
                        if (returnReasonText.length===0){
                            PF('enterReturnReason').show();
                        } else {
                            PF('sendBackToContributor').hide();
                            returnToAuthorCommand();
                        }                           
                    }
                    function openDialog() {
                        PF('details').show();
                    }
                    function openCompareTwo() {
                        PF('compareTwo').show();
                    }
                    function testCheckBoxes() {
                        var count = PF('versionsTable').getSelectedRowsCount();
                        if (count !== 2) {
                            PF('compareTwo').show();
                        } else {
                            $('button[id$="compareVersions"]').trigger('click');
                        }
                    }
                    function testFilesSelectedForRestriction() {
                        var count = PF('filesTable').getSelectedRowsCount();
                        if (count === 0) {
                            PF('selectFilesForRestrict').show();
                        } else {
                            PF('accessPopup').show();
                        }

                    }
                    function testFilesSelectedForTags() {
                        var count = PF('filesTable').getSelectedRowsCount();
                        if (count === 0) {
                            PF('selectFilesForEditTags').show();
                        } else {
                            refreshTagsCommand();
                        }
                    }
                    function testFilesSelectedForDelete() {
                        var count = PF('filesTable').getSelectedRowsCount();
                        if (count === 0) {
                            PF('selectFilesForDelete').show();
                        } else {
                            PF('deleteSelectedFileConfirmation').show();
                        }
                    }
                    function testFilesSelectedForEditMetadata() {
                        var count = PF('filesTable').getSelectedRowsCount();
                        if (count === 0) {
                            PF('selectFilesForEditMetadata').show();
                        } //else {
                        // I commented out the code below; if there's
                        // 1 or more file selected, I don't want this
                        // method to activate the p:remoteCommand that
                        // issues the redirect to the edit page (or
                        // do anything else for that matter). Doing
                        // it this way was, for some reason, causing
                        // this page to still try to render (??), in
                        // some partial, half-baked state - with no
                        // workingVersion present, etc. - that resulted
                        // in some NULL pointers in the logs... So,
                        // instead, the redirect will be done by the
                        // direct action= attribute in the original
                        // commandButton. -- L.A. 4.2.1
                        //openEditFilesPageCommand();
                        //}
                    }
                    function updateTemplate() {
                        $('button[id$="updateTemplate"]').trigger('click');
                    }
                    function registerDataset() {
                        $('button[id$="registerDataset"]').trigger('click');
                    }
                    function checkNewlyRestricted() {
                        if ($('input[id$="showAccessPopup"]').val() === 'true') {
                            PF('accessPopup').show();
                        } else {
                            $('button[id$="datasetSave"]').trigger('click');
                        }
                    }
                    function updateHiddenReason(textArea) {
                        $('input[id$="hiddenReasonInput"]').val(textArea.value);
                    }
                    function testDeaccessionVersionSelection(testVersion) {
                        var deaccessionText = $('input[id$="hiddenReasonInput"]').val();
                        var urlEntry = $('input[id$="forwardURLForDeaccession"]').val();
                        ;
                        var valid = true;
                        if (testVersion === true) {
                            var count = PF('versionDeaccessionTable').getSelectedRowsCount();
                        }
                        if (validateURL(urlEntry) === false) {
                            valid = false;
                            PF('enterForwardUrl').show();
                        }
                        if (valid === true) {
                            if ($("select[id$='reasonOptions'] option:selected").val() === '7') {
                                if (deaccessionText === '') {
                                    valid = false;
                                    PF('enterOtherReason').show();
                                }
                            }
                        }
                        if (deaccessionText.length >= 1001) {
                            valid = false;
                            PF('reasonTooManyCharacters').show();
                        }
                        if (valid === true) {
                            if ($("select[id$='reasonOptions'] option:selected").val() === '0') {
                                valid = false;
                                PF('selectDeaccessionReason').show();
                            }
                        }
                        if (valid === true) {
                            if (testVersion === false) {
                                PF('deaccessionAllConfirmation').show();
                            } else {
                                if (count === 0) {
                                    PF('selectDeaccessionVersion').show();
                                } else {
                                    PF('deaccessionConfirmation').show();
                                }
                            }
                        }
                    }
                    function validateURL(textval) {
                        if (textval === '') {
                            return true;
                        }
                        var urlregex = new RegExp("^(http|https|ftp)\://([a-zA-Z0-9\.\-]+(\:[a-zA-Z0-9\.&%$\-]+)*@)*((25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9])\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[1-9]|0)\.(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])|([a-zA-Z0-9\-]+\.)*[a-zA-Z0-9\-]+\.(com|edu|gov|int|mil|net|org|biz|arpa|info|name|pro|aero|coop|museum|[a-zA-Z]{2}))(\:[0-9]+)*(/($|[a-zA-Z0-9\.\,\?\'\\\+&%$#\=~_\-]+))*$");
                        return urlregex.test(textval);
                    }
                    function openDropboxChooser() {
                        options = {
                            // Required. Called when a user selects an item in the Chooser.
                            success: function (files) {
                                // Pass the JSON-ized output of the Chooser to the backing bean,
                                // via a hidden input field:
                                $('input[id$="dropBoxSelectionInput"]').val(JSON.stringify(files));
                                //alert(JSON.stringify(files));
                                // Trigger the upload processing method in the backing
                                // bean, via an invisible commandButton:
                                $('button[id$="dropBoxButton"]').trigger('click');
                            },
                            linkType: "direct",
                            multiselect: true,
                        };
                        Dropbox.choose(options);
                    }
                </script>
        </div>
        <!-- FOOTER BLOCK -->

    <div id="footer">
        <div class="container">
            <div class="row"><div class="col-sm-8 small">
                    <p>Copyright &#169; 2018, The President &#38; Fellows of Harvard College |  <a href="http://best-practices.dataverse.org/harvard-policies/harvard-privacy-policy.html" target="_blank">Privacy Policy</a>
                    </p></div>
                <div class="col-sm-4 text-right">
                    <div class="poweredbylogo">
                        <span>Powered by</span>
                        <a href="http://dataverse.org/" title="The Dataverse Project" target="_blank"><img src="/resources/images/dataverseproject_logo.png" alt="The Dataverse Project" /></a><span class="version">v. 4.8.4</span>
                    </div>
                </div>
            </div>
        </div>
    </div><style>
#feedbackTab {
    position:fixed;
    bottom:0;
    right:50px;
}
#feedbackTab button.btn-feedback {
    margin-right:89px;
    border-bottom-right-radius: 0;
    border-bottom-left-radius: 0;
}
.btn-feedback {
  background-color: #C55B28;
  border-color: #C55B28;
  color: #fff;
}
.btn-feedback:hover,
.btn-feedback:focus,
.btn-feedback:active,
.btn-feedback.active {
  background-color: #b05124;
  border-color: #9b471f;
  color: #fff;
}
.btn-feedback.disabled:hover,
.btn-feedback.disabled:focus,
.btn-feedback.disabled:active,
.btn-feedback.disabled.active,
.btn-feedback[disabled]:hover,
.btn-feedback[disabled]:focus,
.btn-feedback[disabled]:active,
.btn-feedback[disabled].active,
fieldset[disabled] .btn-feedback:hover,
fieldset[disabled] .btn-feedback:focus,
fieldset[disabled] .btn-feedback:active,
fieldset[disabled] .btn-feedback.active {
  background-color: #C55B28;
  border-color: #C55B28;
}
#feedbackTabBody div.panel {
    width:190px;
    margin:0;
    background:#F8F8F8;
    border-bottom-right-radius:0;
    border-bottom-left-radius:0;
}
</style>

<div id="feedbackTab">
    <button type="button" class="btn btn-feedback" data-toggle="collapse" data-target="#feedbackTabBody">
        Feedback
    </button>
    <div id="feedbackTabBody" class="collapse">
        <div class="panel panel-default">
            <div class="panel-body text-center">
              <p class="text-left">
                  Help improve Dataverse: Volunteer for online usability research!
              </p>
              <a class="btn btn-feedback" href="https://goo.gl/forms/p7uu3GfiWYSlJrsi1" role="button" target="_blank" data-toggle="collapse" data-target="#feedbackTabBody">
                  Learn More
              </a>
            </div>
        </div>
    </div>
</div>
<div id="ajaxStatusPanel"><div id="ajaxStatusPanel_start" style="display:none"><img src="/resources/images/ajax-loading.gif;jsessionid=766c983c5b26e981ce9871afd1b5" alt="Loading" /></div><div id="ajaxStatusPanel_complete" style="display:none">
                <!-- DO NOTHING --></div></div><script id="ajaxStatusPanel_s" type="text/javascript">$(function(){PrimeFaces.cw("AjaxStatus","widget_ajaxStatusPanel",{id:"ajaxStatusPanel"});});</script>
    <!-- Dialog Contact Form --><div id="contactDialog" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="contactDialog_title" class="ui-dialog-title">Contact Harvard Dataverse Support</span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content"><div id="j_idt1855">
<form id="emailForm" name="emailForm" method="post" action="/dataset.xhtml;jsessionid=766c983c5b26e981ce9871afd1b5?persistentId=doi%3A10.7910%2FDVN%2FGAOC03" class="form-horizontal" enctype="application/x-www-form-urlencoded">
<input type="hidden" name="emailForm" value="emailForm" />

                <!-- to: Support -->
                <div class="form-group">
                    <label for="messageTo" class="col-sm-3 control-label">To</label>
                    <div class="col-sm-9">
                        <p id="messageTo" class="form-control-static">Harvard Dataverse Support</p>
                    </div>
                </div>
                <!-- from email (not logged in) -->
                    <div class="form-group">
                        <label for="userEmail" class="col-sm-3 control-label">From <span class="glyphicon glyphicon-asterisk text-danger" title="Required field"></span></label>
                        <div class="col-sm-9"><input id="emailForm:userEmail" name="emailForm:userEmail" type="text" value="" size="30" class="ui-inputfield ui-inputtext ui-widget ui-state-default ui-corner-all form-control" /><script id="emailForm:userEmail_s" type="text/javascript">PrimeFaces.cw("InputText","widget_emailForm_userEmail",{id:"emailForm:userEmail"});</script>
                        </div>
                    </div>
                <!-- subject -->
                <div class="form-group">
                    <label for="messageSubject" class="col-sm-3 control-label">Subject <span class="glyphicon glyphicon-asterisk text-danger" title="Required field"></span></label>
                    <div class="col-sm-9"><input id="emailForm:messageSubject" name="emailForm:messageSubject" type="text" value="" class="ui-inputfield ui-inputtext ui-widget ui-state-default ui-corner-all form-control" /><script id="emailForm:messageSubject_s" type="text/javascript">PrimeFaces.cw("InputText","widget_emailForm_messageSubject",{id:"emailForm:messageSubject"});</script>
                    </div>
                </div>   
                <!-- message -->
                <div class="form-group">
                    <label for="userMessage" class="col-sm-3 control-label">Message <span class="glyphicon glyphicon-asterisk text-danger" title="Required field"></span></label>
                    <div class="col-sm-9"><textarea id="emailForm:userMessage" name="emailForm:userMessage" cols="20" rows="10" maxlength="2147483647" class="ui-inputfield ui-inputtextarea ui-widget ui-state-default ui-corner-all form-control"></textarea><script id="emailForm:userMessage_s" type="text/javascript">$(function(){PrimeFaces.cw("InputTextarea","widget_emailForm_userMessage",{id:"emailForm:userMessage",autoResize:false});});</script>
                    </div>
                </div>
                <!-- validation -->
                <div class="form-group">
                    <div class="col-sm-offset-3 col-sm-9">
                        <p><span class="highlightBold">Please fill this out to prove you are not a robot.</span> <span class="glyphicon glyphicon-asterisk text-danger" title="Required field"></span>
                        </p> +  = <input id="emailForm:messageSum" name="emailForm:messageSum" type="text" size="4" class="ui-inputfield ui-inputtext ui-widget ui-state-default ui-corner-all" /><script id="emailForm:messageSum_s" type="text/javascript">PrimeFaces.cw("InputText","widget_emailForm_messageSum",{id:"emailForm:messageSum"});</script>
                    </div>
                </div>
                <!-- send | cancel buttons -->
                <div class="button-block"><a id="emailForm:j_idt1873" href="#" class="ui-commandlink ui-widget btn btn-default" onclick="PrimeFaces.ab({s:&quot;emailForm:j_idt1873&quot;,u:&quot;emailForm&quot;,onco:function(xhr,status,args){if (args &amp;&amp; !args.validationFailed) PF('contactForm').hide();;},pa:[{name:&quot;DO_VALIDATION&quot;,value:&quot;true&quot;}],fi:&quot;j_idt1855&quot;});return false;">Send Message</a>
                    <button type="button" onclick="PF('contactForm').hide()" class="btn btn-default" value="Cancel">
                        Cancel
                    </button>
                </div><input type="hidden" name="javax.faces.ViewState" id="j_id1:javax.faces.ViewState:0" value="4819980655092063622:4398188165106853993" autocomplete="off" />
</form></div></div></div><script id="contactDialog_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","contactForm",{id:"contactDialog",modal:true});});</script><div id="statusInfo" class="ui-dialog ui-widget ui-widget-content ui-corner-all ui-shadow ui-hidden-container"><div class="ui-dialog-titlebar ui-widget-header ui-helper-clearfix ui-corner-top"><span id="statusInfo_title" class="ui-dialog-title"></span><a href="#" class="ui-dialog-titlebar-icon ui-dialog-titlebar-close ui-corner-all"><span class="ui-icon ui-icon-closethick"></span></a></div><div class="ui-dialog-content ui-widget-content">
            <p></p>
            <div class="button-block">
                <button type="button" onclick="PF('statusInfo').hide()" class="btn btn-default" value="Close">
                    Close
                </button>
            </div></div></div><script id="statusInfo_s" type="text/javascript">$(function(){PrimeFaces.cw("Dialog","statusInfo",{id:"statusInfo",modal:true});});</script>
        <script type="text/javascript" defer="defer" src="/javax.faces.resource/bs/js/bootstrap.min.js.xhtml?version=4.8.4"></script>
        <script type="text/javascript" defer="defer" src="/javax.faces.resource/bs/js/bootstrap-hover-dropdown.min.js.xhtml?version=4.8.4"></script>
        <script type="text/javascript" defer="defer" src="/javax.faces.resource/js/ie-compat.js.xhtml?version=4.8.4"></script>
        <script type="text/javascript" defer="defer" src="/javax.faces.resource/js/dv_rebind_bootstrap_ui.js.xhtml?version=4.8.4"></script>
        <script type="text/javascript" defer="defer" src="/javax.faces.resource/js/owl.carousel.js.xhtml?version=4.8.4"></script>
        <script type="text/javascript" defer="defer" src="/javax.faces.resource/js/jquery.matchHeight.js.xhtml?version=4.8.4"></script>
        <script type="text/javascript" defer="defer" src="/javax.faces.resource/js/jquery.sharrre.js.xhtml?version=4.8.4"></script>  
        <script type="text/javascript" defer="defer" src="/javax.faces.resource/js/clipboard.min.js.xhtml?version=4.8.4"></script>
        <script>
            //<![CDATA[
            $(document).ready(function () {
                // Navbar Search Toggle
                $(document).on('click', '#navbar-search-toggle', function (e) {
                    $(this).parent("li").hide();
                    $("form.navbar-form[role='search']").show();
                });
                $('body').click(function (e) {
                    if (!$(e.target).closest("form.navbar-form[role='search']").length) {
                        $("form.navbar-form[role='search']").hide();
                        $("#navbar-search-toggle").parent("li").show();
                    }
                    ;
                });

                // Rebind bootstrap UI components
                bind_bsui_components();
            });

            
            //]]>
        </script>
    <script><!-- Google Analytics Snippet -->
        (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
         (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
         m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
         })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
 
          ga('create', "UA-61753334-1", 'auto');

          ga('send', 'pageview', {
            'hitType': 'social',
            'socialNetwork': 'facebook',
            'socialAction': 'send',
            'socialTarget': 'https://dataverse.harvard.edu',
            'page': '/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2FGAOC03'
          }, {
            'hitType': 'social',
            'socialNetwork': 'twitter',
            'socialAction': 'tweet',
            'socialTarget': 'https://dataverse.harvard.edu',
            'page': '/dataset.xhtml?persistentId=doi%3A10.7910%2FDVN%2FGAOC03'
          });
        
	</script></body>
</html>
    http_version: 
  recorded_at: Sun, 18 Mar 2018 04:38:27 GMT
recorded_with: VCR 3.0.3
