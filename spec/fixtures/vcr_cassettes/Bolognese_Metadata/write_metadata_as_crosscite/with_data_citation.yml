---
http_interactions:
- request:
    method: get
    uri: http://www.crossref.org/openurl/?format=unixref&id=doi:10.7554/elife.01567&noredirect=true&pid=tech@datacite.org
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Maremma - https://github.com/datacite/maremma
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Crossref-Deployment-Name:
      - cr6-1
      Content-Type:
      - text/xml;charset=UTF-8
      Content-Language:
      - en-US
      Date:
      - Sat, 05 Aug 2017 13:23:18 GMT
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sat, 05 Aug 2017 13:23:18 GMT
- request:
    method: get
    uri: http://api.crossref.org/prefixes/10.7554
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Maremma - https://github.com/datacite/maremma
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: OK
    headers:
      Content-Type:
      - application/json;charset=UTF-8
      Vary:
      - Accept
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '223'
      Server:
      - http-kit
      Date:
      - Sat, 05 Aug 2017 13:23:19 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: UTF-8
      string: '{"status":"ok","message-type":"prefix","message-version":"1.0.0","message":{"member":"http:\/\/id.crossref.org\/member\/4374","name":"eLife
        Sciences Organisation, Ltd.","prefix":"http:\/\/id.crossref.org\/prefix\/10.7554"}}'
    http_version: 
  recorded_at: Sat, 05 Aug 2017 13:23:18 GMT
recorded_with: VCR 3.0.3
